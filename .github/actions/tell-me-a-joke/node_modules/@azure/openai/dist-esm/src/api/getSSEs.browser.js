// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { iterateSseStream } from "@azure/core-sse";
import { wrapError } from "./util.js";
export async function getSSEs(response) {
    const iter = await getStream(response);
    return iterateSseStream(iter);
}
async function getStream(response) {
    const { body, status } = await response.asBrowserStream();
    if (status !== "200" && body !== undefined) {
        const text = await streamToText(body);
        throw wrapError(() => JSON.parse(text).error, "Error parsing response body");
    }
    if (!body)
        throw new Error("No stream found in response. Did you enable the stream option?");
    return body;
}
async function streamToText(stream) {
    const reader = stream.getReader();
    const buffers = [];
    let length = 0;
    try {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const { value, done } = await reader.read();
            if (done) {
                return new TextDecoder().decode(concatBuffers(buffers, length));
            }
            length += value.length;
            buffers.push(value);
        }
    }
    finally {
        reader.releaseLock();
    }
}
function getBuffersLength(buffers) {
    return buffers.reduce((acc, curr) => acc + curr.length, 0);
}
function concatBuffers(buffers, len) {
    const length = len !== null && len !== void 0 ? len : getBuffersLength(buffers);
    const res = new Uint8Array(length);
    for (let i = 0, pos = 0; i < buffers.length; i++) {
        const buffer = buffers[i];
        res.set(buffer, pos);
        pos += buffer.length;
    }
    return res;
}
//# sourceMappingURL=getSSEs.browser.js.map