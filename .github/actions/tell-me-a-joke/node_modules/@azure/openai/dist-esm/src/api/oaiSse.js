// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __asyncGenerator, __asyncValues, __await } from "tslib";
import { getSSEs } from "./getSSEs.js";
import { wrapError } from "./util.js";
export function getOaiSSEs(response, toEvent) {
    return __asyncGenerator(this, arguments, function* getOaiSSEs_1() {
        var _a, e_1, _b, _c;
        const stream = yield __await(getSSEs(response));
        let isDone = false;
        try {
            for (var _d = true, stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield __await(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {
                _c = stream_1_1.value;
                _d = false;
                const event = _c;
                if (isDone) {
                    // handle a case where the service sends excess stream
                    // data after the [DONE] event
                    continue;
                }
                else if (event.data === "[DONE]") {
                    isDone = true;
                }
                else {
                    yield yield __await(toEvent(wrapError(() => JSON.parse(event.data), "Error parsing an event. See 'cause' for more details")));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = stream_1.return)) yield __await(_b.call(stream_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
//# sourceMappingURL=oaiSse.js.map