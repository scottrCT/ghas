// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __rest } from "tslib";
/**
 * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * Any changes you make here may be lost.
 *
 * If you need to make changes, please do so in the original source file, \{project-root\}/sources/custom
 */
import { operationOptionsToRequestParameters } from "@azure-rest/core-client";
import { getLongRunningPoller, isUnexpected, } from "../rest/index.js";
import { getChatCompletionsResult, getCompletionsResult } from "./deserializers.js";
import { getOaiSSEs } from "./oaiSse.js";
import { createFile } from "./policies/formDataPolicy.js";
import { renameKeysToCamelCase } from "./util.js";
export function _getEmbeddingsSend(context, input, deploymentId, options = { requestOptions: {} }) {
    return context.path("/deployments/{deploymentId}/embeddings", deploymentId).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { body: { user: options === null || options === void 0 ? void 0 : options.user, model: options === null || options === void 0 ? void 0 : options.model, input: input } }));
}
export async function _getEmbeddingsDeserialize(result) {
    var _a;
    if (isUnexpected(result)) {
        throw result.body.error;
    }
    return {
        data: ((_a = result.body["data"]) !== null && _a !== void 0 ? _a : []).map((p) => ({
            embedding: p["embedding"],
            index: p["index"],
        })),
        usage: {
            promptTokens: result.body.usage["prompt_tokens"],
            totalTokens: result.body.usage["total_tokens"],
        },
    };
}
/** Return the embeddings for a given prompt. */
export async function getEmbeddings(context, input, deploymentId, options = { requestOptions: {} }) {
    const result = await _getEmbeddingsSend(context, input, deploymentId, options);
    return _getEmbeddingsDeserialize(result);
}
export function _getCompletionsSend(context, prompt, deploymentId, options = { requestOptions: {} }) {
    return context.path("/deployments/{deploymentId}/completions", deploymentId).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { body: {
            prompt: prompt,
            max_tokens: options === null || options === void 0 ? void 0 : options.maxTokens,
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            logit_bias: options === null || options === void 0 ? void 0 : options.logitBias,
            user: options === null || options === void 0 ? void 0 : options.user,
            n: options === null || options === void 0 ? void 0 : options.n,
            logprobs: options === null || options === void 0 ? void 0 : options.logprobs,
            echo: options === null || options === void 0 ? void 0 : options.echo,
            stop: options === null || options === void 0 ? void 0 : options.stop,
            presence_penalty: options === null || options === void 0 ? void 0 : options.presencePenalty,
            frequency_penalty: options === null || options === void 0 ? void 0 : options.frequencyPenalty,
            best_of: options === null || options === void 0 ? void 0 : options.bestOf,
            stream: options === null || options === void 0 ? void 0 : options.stream,
            model: options === null || options === void 0 ? void 0 : options.model,
        } }));
}
export async function _getCompletionsDeserialize(result) {
    var _a, _b;
    if (isUnexpected(result)) {
        throw result.body.error;
    }
    return {
        id: result.body["id"],
        created: new Date(result.body["created"]),
        promptFilterResults: ((_a = result.body["prompt_annotations"]) !== null && _a !== void 0 ? _a : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
            return ({
                promptIndex: p["prompt_index"],
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_a = p.content_filter_results) === null || _a === void 0 ? void 0 : _a.sexual)
                            ? undefined
                            : {
                                severity: (_c = (_b = p.content_filter_results) === null || _b === void 0 ? void 0 : _b.sexual) === null || _c === void 0 ? void 0 : _c["severity"],
                                filtered: (_e = (_d = p.content_filter_results) === null || _d === void 0 ? void 0 : _d.sexual) === null || _e === void 0 ? void 0 : _e["filtered"],
                            },
                        violence: !((_f = p.content_filter_results) === null || _f === void 0 ? void 0 : _f.violence)
                            ? undefined
                            : {
                                severity: (_h = (_g = p.content_filter_results) === null || _g === void 0 ? void 0 : _g.violence) === null || _h === void 0 ? void 0 : _h["severity"],
                                filtered: (_k = (_j = p.content_filter_results) === null || _j === void 0 ? void 0 : _j.violence) === null || _k === void 0 ? void 0 : _k["filtered"],
                            },
                        hate: !((_l = p.content_filter_results) === null || _l === void 0 ? void 0 : _l.hate)
                            ? undefined
                            : {
                                severity: (_o = (_m = p.content_filter_results) === null || _m === void 0 ? void 0 : _m.hate) === null || _o === void 0 ? void 0 : _o["severity"],
                                filtered: (_q = (_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.hate) === null || _q === void 0 ? void 0 : _q["filtered"],
                            },
                        selfHarm: !((_r = p.content_filter_results) === null || _r === void 0 ? void 0 : _r.self_harm)
                            ? undefined
                            : {
                                severity: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.self_harm) === null || _t === void 0 ? void 0 : _t["severity"],
                                filtered: (_v = (_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.self_harm) === null || _v === void 0 ? void 0 : _v["filtered"],
                            },
                    },
            });
        }),
        choices: ((_b = result.body["choices"]) !== null && _b !== void 0 ? _b : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
            return ({
                text: p["text"],
                index: p["index"],
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_a = p.content_filter_results) === null || _a === void 0 ? void 0 : _a.sexual)
                            ? undefined
                            : {
                                severity: (_c = (_b = p.content_filter_results) === null || _b === void 0 ? void 0 : _b.sexual) === null || _c === void 0 ? void 0 : _c["severity"],
                                filtered: (_e = (_d = p.content_filter_results) === null || _d === void 0 ? void 0 : _d.sexual) === null || _e === void 0 ? void 0 : _e["filtered"],
                            },
                        violence: !((_f = p.content_filter_results) === null || _f === void 0 ? void 0 : _f.violence)
                            ? undefined
                            : {
                                severity: (_h = (_g = p.content_filter_results) === null || _g === void 0 ? void 0 : _g.violence) === null || _h === void 0 ? void 0 : _h["severity"],
                                filtered: (_k = (_j = p.content_filter_results) === null || _j === void 0 ? void 0 : _j.violence) === null || _k === void 0 ? void 0 : _k["filtered"],
                            },
                        hate: !((_l = p.content_filter_results) === null || _l === void 0 ? void 0 : _l.hate)
                            ? undefined
                            : {
                                severity: (_o = (_m = p.content_filter_results) === null || _m === void 0 ? void 0 : _m.hate) === null || _o === void 0 ? void 0 : _o["severity"],
                                filtered: (_q = (_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.hate) === null || _q === void 0 ? void 0 : _q["filtered"],
                            },
                        selfHarm: !((_r = p.content_filter_results) === null || _r === void 0 ? void 0 : _r.self_harm)
                            ? undefined
                            : {
                                severity: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.self_harm) === null || _t === void 0 ? void 0 : _t["severity"],
                                filtered: (_v = (_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.self_harm) === null || _v === void 0 ? void 0 : _v["filtered"],
                            },
                    },
                logprobs: p.logprobs === null
                    ? null
                    : {
                        tokens: p.logprobs["tokens"],
                        tokenLogprobs: p.logprobs["token_logprobs"],
                        topLogprobs: p.logprobs["top_logprobs"],
                        textOffset: p.logprobs["text_offset"],
                    },
                finishReason: p["finish_reason"],
            });
        }),
        usage: {
            completionTokens: result.body.usage["completion_tokens"],
            promptTokens: result.body.usage["prompt_tokens"],
            totalTokens: result.body.usage["total_tokens"],
        },
    };
}
/**
 * Gets completions for the provided input prompts.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export async function getCompletions(context, prompt, deploymentId, options = { requestOptions: {} }) {
    const result = await _getCompletionsSend(context, prompt, deploymentId, options);
    return _getCompletionsDeserialize(result);
}
export function _getChatCompletionsSend(context, messages, deploymentId, options = { requestOptions: {} }) {
    return context.path("/deployments/{deploymentId}/chat/completions", deploymentId).post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { body: {
            messages: parseChatMessage(messages),
            functions: options === null || options === void 0 ? void 0 : options.functions,
            function_call: options === null || options === void 0 ? void 0 : options.functionCall,
            max_tokens: options === null || options === void 0 ? void 0 : options.maxTokens,
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            logit_bias: options === null || options === void 0 ? void 0 : options.logitBias,
            user: options === null || options === void 0 ? void 0 : options.user,
            n: options === null || options === void 0 ? void 0 : options.n,
            stop: options === null || options === void 0 ? void 0 : options.stop,
            presence_penalty: options === null || options === void 0 ? void 0 : options.presencePenalty,
            frequency_penalty: options === null || options === void 0 ? void 0 : options.frequencyPenalty,
            stream: options === null || options === void 0 ? void 0 : options.stream,
            model: options === null || options === void 0 ? void 0 : options.model,
            dataSources: options === null || options === void 0 ? void 0 : options.dataSources,
        } }));
}
export async function _getChatCompletionsDeserialize(result) {
    var _a, _b;
    if (isUnexpected(result)) {
        throw result.body.error;
    }
    return {
        id: result.body["id"],
        created: new Date(result.body["created"]),
        choices: ((_a = result.body["choices"]) !== null && _a !== void 0 ? _a : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
            return ({
                message: !p.message ? undefined : p.message,
                index: p["index"],
                finishReason: p["finish_reason"],
                delta: !p.delta
                    ? undefined
                    : {
                        role: (_a = p.delta) === null || _a === void 0 ? void 0 : _a["role"],
                        content: (_b = p.delta) === null || _b === void 0 ? void 0 : _b["content"],
                        name: (_c = p.delta) === null || _c === void 0 ? void 0 : _c["name"],
                        functionCall: !((_d = p.delta) === null || _d === void 0 ? void 0 : _d.function_call)
                            ? undefined
                            : {
                                name: (_f = (_e = p.delta) === null || _e === void 0 ? void 0 : _e.function_call) === null || _f === void 0 ? void 0 : _f["name"],
                                arguments: (_h = (_g = p.delta) === null || _g === void 0 ? void 0 : _g.function_call) === null || _h === void 0 ? void 0 : _h["arguments"],
                            },
                        context: !((_j = p.delta) === null || _j === void 0 ? void 0 : _j.context)
                            ? undefined
                            : {
                                messages: !((_l = (_k = p.delta) === null || _k === void 0 ? void 0 : _k.context) === null || _l === void 0 ? void 0 : _l.messages)
                                    ? undefined
                                    : (_o = (_m = p.delta) === null || _m === void 0 ? void 0 : _m.context) === null || _o === void 0 ? void 0 : _o.messages,
                            },
                    },
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.sexual)
                            ? undefined
                            : {
                                severity: (_r = (_q = p.content_filter_results) === null || _q === void 0 ? void 0 : _q.sexual) === null || _r === void 0 ? void 0 : _r["severity"],
                                filtered: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.sexual) === null || _t === void 0 ? void 0 : _t["filtered"],
                            },
                        violence: !((_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.violence)
                            ? undefined
                            : {
                                severity: (_w = (_v = p.content_filter_results) === null || _v === void 0 ? void 0 : _v.violence) === null || _w === void 0 ? void 0 : _w["severity"],
                                filtered: (_y = (_x = p.content_filter_results) === null || _x === void 0 ? void 0 : _x.violence) === null || _y === void 0 ? void 0 : _y["filtered"],
                            },
                        hate: !((_z = p.content_filter_results) === null || _z === void 0 ? void 0 : _z.hate)
                            ? undefined
                            : {
                                severity: (_1 = (_0 = p.content_filter_results) === null || _0 === void 0 ? void 0 : _0.hate) === null || _1 === void 0 ? void 0 : _1["severity"],
                                filtered: (_3 = (_2 = p.content_filter_results) === null || _2 === void 0 ? void 0 : _2.hate) === null || _3 === void 0 ? void 0 : _3["filtered"],
                            },
                        selfHarm: !((_4 = p.content_filter_results) === null || _4 === void 0 ? void 0 : _4.self_harm)
                            ? undefined
                            : {
                                severity: (_6 = (_5 = p.content_filter_results) === null || _5 === void 0 ? void 0 : _5.self_harm) === null || _6 === void 0 ? void 0 : _6["severity"],
                                filtered: (_8 = (_7 = p.content_filter_results) === null || _7 === void 0 ? void 0 : _7.self_harm) === null || _8 === void 0 ? void 0 : _8["filtered"],
                            },
                    },
            });
        }),
        promptFilterResults: ((_b = result.body["prompt_annotations"]) !== null && _b !== void 0 ? _b : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
            return ({
                promptIndex: p["prompt_index"],
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_a = p.content_filter_results) === null || _a === void 0 ? void 0 : _a.sexual)
                            ? undefined
                            : {
                                severity: (_c = (_b = p.content_filter_results) === null || _b === void 0 ? void 0 : _b.sexual) === null || _c === void 0 ? void 0 : _c["severity"],
                                filtered: (_e = (_d = p.content_filter_results) === null || _d === void 0 ? void 0 : _d.sexual) === null || _e === void 0 ? void 0 : _e["filtered"],
                            },
                        violence: !((_f = p.content_filter_results) === null || _f === void 0 ? void 0 : _f.violence)
                            ? undefined
                            : {
                                severity: (_h = (_g = p.content_filter_results) === null || _g === void 0 ? void 0 : _g.violence) === null || _h === void 0 ? void 0 : _h["severity"],
                                filtered: (_k = (_j = p.content_filter_results) === null || _j === void 0 ? void 0 : _j.violence) === null || _k === void 0 ? void 0 : _k["filtered"],
                            },
                        hate: !((_l = p.content_filter_results) === null || _l === void 0 ? void 0 : _l.hate)
                            ? undefined
                            : {
                                severity: (_o = (_m = p.content_filter_results) === null || _m === void 0 ? void 0 : _m.hate) === null || _o === void 0 ? void 0 : _o["severity"],
                                filtered: (_q = (_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.hate) === null || _q === void 0 ? void 0 : _q["filtered"],
                            },
                        selfHarm: !((_r = p.content_filter_results) === null || _r === void 0 ? void 0 : _r.self_harm)
                            ? undefined
                            : {
                                severity: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.self_harm) === null || _t === void 0 ? void 0 : _t["severity"],
                                filtered: (_v = (_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.self_harm) === null || _v === void 0 ? void 0 : _v["filtered"],
                            },
                    },
            });
        }),
        usage: {
            completionTokens: result.body.usage["completion_tokens"],
            promptTokens: result.body.usage["prompt_tokens"],
            totalTokens: result.body.usage["total_tokens"],
        },
    };
}
export function _getChatCompletionsWithAzureExtensionsSend(context, messages, deploymentId, options = { requestOptions: {} }) {
    return context
        .path("/deployments/{deploymentId}/extensions/chat/completions", deploymentId)
        .post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { body: {
            messages: parseChatMessage(messages),
            functions: options === null || options === void 0 ? void 0 : options.functions,
            function_call: options === null || options === void 0 ? void 0 : options.functionCall,
            max_tokens: options === null || options === void 0 ? void 0 : options.maxTokens,
            temperature: options === null || options === void 0 ? void 0 : options.temperature,
            top_p: options === null || options === void 0 ? void 0 : options.topP,
            logit_bias: options === null || options === void 0 ? void 0 : options.logitBias,
            user: options === null || options === void 0 ? void 0 : options.user,
            n: options === null || options === void 0 ? void 0 : options.n,
            stop: options === null || options === void 0 ? void 0 : options.stop,
            presence_penalty: options === null || options === void 0 ? void 0 : options.presencePenalty,
            frequency_penalty: options === null || options === void 0 ? void 0 : options.frequencyPenalty,
            stream: options === null || options === void 0 ? void 0 : options.stream,
            model: options === null || options === void 0 ? void 0 : options.model,
            dataSources: options === null || options === void 0 ? void 0 : options.dataSources,
        } }));
}
export async function _getChatCompletionsWithAzureExtensionsDeserialize(result) {
    var _a, _b;
    if (isUnexpected(result)) {
        throw result.body.error;
    }
    return {
        id: result.body["id"],
        created: new Date(result.body["created"]),
        choices: ((_a = result.body["choices"]) !== null && _a !== void 0 ? _a : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
            return ({
                message: !p.message ? undefined : p.message,
                index: p["index"],
                finishReason: p["finish_reason"],
                delta: !p.delta
                    ? undefined
                    : {
                        role: (_a = p.delta) === null || _a === void 0 ? void 0 : _a["role"],
                        content: (_b = p.delta) === null || _b === void 0 ? void 0 : _b["content"],
                        name: (_c = p.delta) === null || _c === void 0 ? void 0 : _c["name"],
                        functionCall: !((_d = p.delta) === null || _d === void 0 ? void 0 : _d.function_call)
                            ? undefined
                            : {
                                name: (_f = (_e = p.delta) === null || _e === void 0 ? void 0 : _e.function_call) === null || _f === void 0 ? void 0 : _f["name"],
                                arguments: (_h = (_g = p.delta) === null || _g === void 0 ? void 0 : _g.function_call) === null || _h === void 0 ? void 0 : _h["arguments"],
                            },
                        context: !((_j = p.delta) === null || _j === void 0 ? void 0 : _j.context)
                            ? undefined
                            : {
                                messages: !((_l = (_k = p.delta) === null || _k === void 0 ? void 0 : _k.context) === null || _l === void 0 ? void 0 : _l.messages)
                                    ? undefined
                                    : (_o = (_m = p.delta) === null || _m === void 0 ? void 0 : _m.context) === null || _o === void 0 ? void 0 : _o.messages,
                            },
                    },
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.sexual)
                            ? undefined
                            : {
                                severity: (_r = (_q = p.content_filter_results) === null || _q === void 0 ? void 0 : _q.sexual) === null || _r === void 0 ? void 0 : _r["severity"],
                                filtered: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.sexual) === null || _t === void 0 ? void 0 : _t["filtered"],
                            },
                        violence: !((_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.violence)
                            ? undefined
                            : {
                                severity: (_w = (_v = p.content_filter_results) === null || _v === void 0 ? void 0 : _v.violence) === null || _w === void 0 ? void 0 : _w["severity"],
                                filtered: (_y = (_x = p.content_filter_results) === null || _x === void 0 ? void 0 : _x.violence) === null || _y === void 0 ? void 0 : _y["filtered"],
                            },
                        hate: !((_z = p.content_filter_results) === null || _z === void 0 ? void 0 : _z.hate)
                            ? undefined
                            : {
                                severity: (_1 = (_0 = p.content_filter_results) === null || _0 === void 0 ? void 0 : _0.hate) === null || _1 === void 0 ? void 0 : _1["severity"],
                                filtered: (_3 = (_2 = p.content_filter_results) === null || _2 === void 0 ? void 0 : _2.hate) === null || _3 === void 0 ? void 0 : _3["filtered"],
                            },
                        selfHarm: !((_4 = p.content_filter_results) === null || _4 === void 0 ? void 0 : _4.self_harm)
                            ? undefined
                            : {
                                severity: (_6 = (_5 = p.content_filter_results) === null || _5 === void 0 ? void 0 : _5.self_harm) === null || _6 === void 0 ? void 0 : _6["severity"],
                                filtered: (_8 = (_7 = p.content_filter_results) === null || _7 === void 0 ? void 0 : _7.self_harm) === null || _8 === void 0 ? void 0 : _8["filtered"],
                            },
                    },
            });
        }),
        promptFilterResults: ((_b = result.body["prompt_annotations"]) !== null && _b !== void 0 ? _b : []).map((p) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
            return ({
                promptIndex: p["prompt_index"],
                contentFilterResults: !p.content_filter_results
                    ? undefined
                    : {
                        sexual: !((_a = p.content_filter_results) === null || _a === void 0 ? void 0 : _a.sexual)
                            ? undefined
                            : {
                                severity: (_c = (_b = p.content_filter_results) === null || _b === void 0 ? void 0 : _b.sexual) === null || _c === void 0 ? void 0 : _c["severity"],
                                filtered: (_e = (_d = p.content_filter_results) === null || _d === void 0 ? void 0 : _d.sexual) === null || _e === void 0 ? void 0 : _e["filtered"],
                            },
                        violence: !((_f = p.content_filter_results) === null || _f === void 0 ? void 0 : _f.violence)
                            ? undefined
                            : {
                                severity: (_h = (_g = p.content_filter_results) === null || _g === void 0 ? void 0 : _g.violence) === null || _h === void 0 ? void 0 : _h["severity"],
                                filtered: (_k = (_j = p.content_filter_results) === null || _j === void 0 ? void 0 : _j.violence) === null || _k === void 0 ? void 0 : _k["filtered"],
                            },
                        hate: !((_l = p.content_filter_results) === null || _l === void 0 ? void 0 : _l.hate)
                            ? undefined
                            : {
                                severity: (_o = (_m = p.content_filter_results) === null || _m === void 0 ? void 0 : _m.hate) === null || _o === void 0 ? void 0 : _o["severity"],
                                filtered: (_q = (_p = p.content_filter_results) === null || _p === void 0 ? void 0 : _p.hate) === null || _q === void 0 ? void 0 : _q["filtered"],
                            },
                        selfHarm: !((_r = p.content_filter_results) === null || _r === void 0 ? void 0 : _r.self_harm)
                            ? undefined
                            : {
                                severity: (_t = (_s = p.content_filter_results) === null || _s === void 0 ? void 0 : _s.self_harm) === null || _t === void 0 ? void 0 : _t["severity"],
                                filtered: (_v = (_u = p.content_filter_results) === null || _u === void 0 ? void 0 : _u.self_harm) === null || _v === void 0 ? void 0 : _v["filtered"],
                            },
                    },
            });
        }),
        usage: {
            completionTokens: result.body.usage["completion_tokens"],
            promptTokens: result.body.usage["prompt_tokens"],
            totalTokens: result.body.usage["total_tokens"],
        },
    };
}
/**
 * Gets chat completions for the provided chat messages.
 * This is an Azure-specific version of chat completions that supports integration with configured data sources and
 * other augmentations to the base chat completions capabilities.
 */
export async function getChatCompletionsWithAzureExtensions(context, messages, deploymentId, options = { requestOptions: {} }) {
    const result = await _getChatCompletionsWithAzureExtensionsSend(context, messages, deploymentId, options);
    return _getChatCompletionsWithAzureExtensionsDeserialize(result);
}
export function _beginAzureBatchImageGenerationSend(context, prompt, options = { requestOptions: {} }) {
    return context.path("/images/generations:submit").post(Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { body: {
            prompt: prompt,
            n: options === null || options === void 0 ? void 0 : options.n,
            size: options === null || options === void 0 ? void 0 : options.size,
            response_format: options === null || options === void 0 ? void 0 : options.responseFormat,
            user: options === null || options === void 0 ? void 0 : options.user,
        } }));
}
export function listCompletions(context, prompt, deploymentName, options = { requestOptions: {} }) {
    const response = _getCompletionsSend(context, prompt, deploymentName, Object.assign(Object.assign({}, options), { stream: true }));
    return getOaiSSEs(response, getCompletionsResult);
}
export async function getImages(context, prompt, options = { requestOptions: {} }) {
    const response = await _beginAzureBatchImageGenerationSend(context, prompt, options);
    if (isUnexpected(response)) {
        // Check for response from OpenAI
        const body = response.body;
        if (body.created && body.data) {
            return body;
        }
        throw response.body.error;
    }
    if (response.status === "202") {
        const poller = await getLongRunningPoller(context, response);
        const result = await poller.pollUntilDone();
        return getImageResultsDeserialize(result);
    }
    else {
        return getImageResultsDeserialize(response);
    }
}
export function listChatCompletions(context, messages, deploymentName, options = { requestOptions: {} }) {
    const response = _getChatCompletionsSendX(context, messages, deploymentName, Object.assign(Object.assign({}, options), { stream: true }));
    return getOaiSSEs(response, getChatCompletionsResult);
}
/**
 * Gets chat completions for the provided chat messages.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export async function getChatCompletions(context, messages, deploymentId, options = { requestOptions: {} }) {
    const result = await _getChatCompletionsSendX(context, messages, deploymentId, options);
    if (isUnexpected(result)) {
        throw result.body.error;
    }
    return getChatCompletionsResult(result.body);
}
function convertResultTypes({ created, data }) {
    if (typeof data[0].url === "string") {
        return {
            created: new Date(created),
            data: data,
        };
    }
    else {
        return {
            created: new Date(created),
            data: data.map((item) => {
                return {
                    base64Data: item.b64_json,
                };
            }),
        };
    }
}
function getImageResultsDeserialize(response) {
    if (isUnexpected(response) || !response.body.result) {
        throw response.body.error;
    }
    const result = response.body.result;
    return convertResultTypes(result);
}
function _getChatCompletionsSendX(context, messages, deploymentName, options = { requestOptions: {} }) {
    var _a, _b;
    return ((_a = options.azureExtensionOptions) === null || _a === void 0 ? void 0 : _a.extensions)
        ? _getChatCompletionsWithAzureExtensionsSend(context, messages, deploymentName, Object.assign(Object.assign({}, options), { dataSources: (_b = options.azureExtensionOptions) === null || _b === void 0 ? void 0 : _b.extensions }))
        : _getChatCompletionsSend(context, messages, deploymentName, options);
}
// implementation
export async function getAudioTranslation(context, deploymentName, fileContent, formatOrOptions, inputOptions) {
    const options = inputOptions !== null && inputOptions !== void 0 ? inputOptions : (typeof formatOrOptions === "string" ? {} : formatOrOptions !== null && formatOrOptions !== void 0 ? formatOrOptions : {});
    const response_format = typeof formatOrOptions === "string" ? formatOrOptions : undefined;
    const { temperature, prompt, model } = options, rest = __rest(options, ["temperature", "prompt", "model"]);
    const { body, status } = await context
        .pathUnchecked("deployments/{deploymentId}/audio/translations", deploymentName)
        .post(Object.assign(Object.assign({ body: Object.assign(Object.assign(Object.assign(Object.assign({ file: await createFile(fileContent) }, (response_format && { response_format })), (temperature !== undefined ? { temperature } : {})), (prompt && { prompt })), (model && { model })) }, rest), { contentType: "multipart/form-data" }));
    if (status !== "200") {
        throw body.error;
    }
    return response_format !== "verbose_json"
        ? body
        : renameKeysToCamelCase(body);
}
// implementation
export async function getAudioTranscription(context, deploymentName, fileContent, formatOrOptions, inputOptions) {
    const options = inputOptions !== null && inputOptions !== void 0 ? inputOptions : (typeof formatOrOptions === "string" ? {} : formatOrOptions !== null && formatOrOptions !== void 0 ? formatOrOptions : {});
    const response_format = typeof formatOrOptions === "string" ? formatOrOptions : undefined;
    const { temperature, language, prompt, model } = options, rest = __rest(options, ["temperature", "language", "prompt", "model"]);
    const { body, status } = await context
        .pathUnchecked("deployments/{deploymentId}/audio/transcriptions", deploymentName)
        .post(Object.assign(Object.assign({ body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ file: await createFile(fileContent) }, (response_format && { response_format })), (language && { language })), (temperature !== undefined ? { temperature } : {})), (prompt && { prompt })), (model && { model })) }, rest), { contentType: "multipart/form-data" }));
    if (status !== "200") {
        throw body.error;
    }
    return response_format !== "verbose_json"
        ? body
        : renameKeysToCamelCase(body);
}
function parseChatMessage(messages) {
    return messages.map((p) => {
        var _a;
        return ({
            role: p.role,
            content: (_a = p.content) !== null && _a !== void 0 ? _a : null,
            name: p.name,
            function_call: p.functionCall,
            context: p.context,
        });
    });
}
//# sourceMappingURL=operations.js.map