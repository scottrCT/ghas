{"version":3,"file":"index.cjs","sources":["../src/OpenAIKeyCredential.ts","../src/logger.ts","../src/rest/openAIClient.ts","../src/rest/isUnexpected.ts","../src/rest/pollingHelper.ts","../src/api/OpenAIContext.ts","../src/api/deserializers.ts","../src/api/util.ts","../src/api/getSSEs.ts","../src/api/oaiSse.ts","../src/api/policies/formDataPolicy.ts","../src/api/operations.ts","../src/api/policies/nonAzure.ts","../src/OpenAIClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential } from \"@azure/core-auth\";\n\n/**\n * The OpenAIKeyCredential class represents an OpenAI API key\n * and is used to authenticate into an OpenAI client for\n * an OpenAI endpoint.\n */\nexport class OpenAIKeyCredential implements KeyCredential {\n  private _key: string;\n\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key: string) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n\n    this._key = createKey(key);\n  }\n\n  /**\n   * The value of the key to be used in authentication\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  public update(newKey: string): void {\n    this._key = createKey(newKey);\n  }\n}\n\nfunction createKey(key: string): string {\n  return key.startsWith(\"Bearer \") ? key : `Bearer ${key}`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"openai\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {}\n): OpenAIContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}/openai`;\n  options.apiVersion = options.apiVersion ?? \"2023-09-01-preview\";\n  options = {\n    ...options,\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"api-key\",\n    },\n  };\n\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.7`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as OpenAIContext;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusLogicalResponse,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  BeginAzureBatchImageGenerationDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/extensions/chat/completions\": [\"200\"],\n  \"GET /operations/images/{operationId}\": [\"200\"],\n  \"POST /images/generations:submit\": [\"202\"],\n  \"GET /images/generations:submit\": [\"200\", \"202\"],\n};\n\nexport function isUnexpected(\n  response: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): response is GetEmbeddingsDefaultResponse;\nexport function isUnexpected(\n  response: GetCompletions200Response | GetCompletionsDefaultResponse\n): response is GetCompletionsDefaultResponse;\nexport function isUnexpected(\n  response: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): response is GetChatCompletionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n): response is GetChatCompletionsWithAzureExtensionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n): response is GetAzureBatchImageGenerationOperationStatusDefaultResponse;\nexport function isUnexpected(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n): response is BeginAzureBatchImageGenerationDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetEmbeddings200Response\n    | GetEmbeddingsDefaultResponse\n    | GetCompletions200Response\n    | GetCompletionsDefaultResponse\n    | GetChatCompletions200Response\n    | GetChatCompletionsDefaultResponse\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n): response is\n  | GetEmbeddingsDefaultResponse\n  | GetCompletionsDefaultResponse\n  | GetChatCompletionsDefaultResponse\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n  | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n  | BeginAzureBatchImageGenerationDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\"\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { Client, HttpResponse } from \"@azure-rest/core-client\";\nimport {\n  CreateHttpPollerOptions,\n  LongRunningOperation,\n  LroResponse,\n  OperationState,\n  SimplePollerLike,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport {\n  GetAzureBatchImageGenerationOperationStatus200Response,\n  GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  GetAzureBatchImageGenerationOperationStatusLogicalResponse,\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationDefaultResponse,\n  BeginAzureBatchImageGenerationLogicalResponse,\n} from \"./responses.js\";\n/**\n * Helper function that builds a Poller object to help polling a long running operation.\n * @param client - Client to use for sending the request to get additional pages.\n * @param initialResponse - The initial response.\n * @param options - Options to set a resume state or custom polling interval.\n * @returns - A poller object to poll for operation state updates and eventually get the final response.\n */\nexport async function getLongRunningPoller<\n  TResult extends\n    | BeginAzureBatchImageGenerationLogicalResponse\n    | BeginAzureBatchImageGenerationDefaultResponse\n>(\n  client: Client,\n  initialResponse:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<\n  TResult extends\n    | GetAzureBatchImageGenerationOperationStatusLogicalResponse\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse\n>(\n  client: Client,\n  initialResponse:\n    | GetAzureBatchImageGenerationOperationStatus200Response\n    | GetAzureBatchImageGenerationOperationStatusDefaultResponse,\n  options?: CreateHttpPollerOptions<TResult, OperationState<TResult>>\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>>;\nexport async function getLongRunningPoller<TResult extends HttpResponse>(\n  client: Client,\n  initialResponse: TResult,\n  options: CreateHttpPollerOptions<TResult, OperationState<TResult>> = {}\n): Promise<SimplePollerLike<OperationState<TResult>, TResult>> {\n  const poller: LongRunningOperation<TResult> = {\n    requestMethod: initialResponse.request.method,\n    requestPath: initialResponse.request.url,\n    sendInitialRequest: async () => {\n      // In the case of Rest Clients we are building the LRO poller object from a response that's the reason\n      // we are not triggering the initial request here, just extracting the information from the\n      // response we were provided.\n      return getLroResponse(initialResponse);\n    },\n    sendPollRequest: async (path) => {\n      // This is the callback that is going to be called to poll the service\n      // to get the latest status. We use the client provided and the polling path\n      // which is an opaque URL provided by caller, the service sends this in one of the following headers: operation-location, azure-asyncoperation or location\n      // depending on the lro pattern that the service implements. If non is provided we default to the initial path.\n      const response = await client.pathUnchecked(path ?? initialResponse.request.url).get();\n      const lroResponse = getLroResponse(response as TResult);\n      lroResponse.rawResponse.headers[\"x-ms-original-url\"] = initialResponse.request.url;\n      return lroResponse;\n    },\n  };\n\n  options.resolveOnUnsuccessful = options.resolveOnUnsuccessful ?? true;\n  return createHttpPoller(poller, options);\n}\n\n/**\n * Converts a Rest Client response to a response that the LRO implementation understands\n * @param response - a rest client http response\n * @returns - An LRO response that the LRO implementation understands\n */\nfunction getLroResponse<TResult extends HttpResponse>(response: TResult): LroResponse<TResult> {\n  if (Number.isNaN(response.status)) {\n    throw new TypeError(`Status code of the response is not a number. Value: ${response.status}`);\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body,\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { OpenAIContext } from \"../rest/index.js\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport getClient from \"../rest/index.js\";\n\nexport interface OpenAIClientOptions extends ClientOptions {}\n\nexport { OpenAIContext } from \"../rest/index.js\";\n\n/** Azure OpenAI APIs for completions and search */\nexport function createOpenAI(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: OpenAIClientOptions = {}\n): OpenAIContext {\n  const baseUrl = endpoint;\n  const clientContext = getClient(baseUrl, credential, options);\n  return clientContext;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { ChatMessage, ChatRole, Completions, PromptFilterResult } from \"../models/models.js\";\nimport {\n  ChatChoiceOutput,\n  ChatMessageOutput,\n  ChoiceOutput,\n  ContentFilterResultsOutput,\n  PromptFilterResultOutput,\n} from \"../rest/outputModels.js\";\nimport { ChatCompletions } from \"../models/models.js\";\nimport { ContentFilterResults } from \"./models.js\";\n\nfunction getPromptFilterResult(body: Record<string, any>): {\n  promptFilterResults?: PromptFilterResult[];\n} {\n  const res = body[\"prompt_annotations\"] ?? body[\"prompt_filter_results\"];\n  return !res\n    ? {}\n    : {\n        promptFilterResults: res.map((p: PromptFilterResultOutput) => ({\n          promptIndex: p[\"prompt_index\"],\n          ...(!p.content_filter_results\n            ? {}\n            : {\n                contentFilterResults: deserializeContentFilter(p.content_filter_results),\n              }),\n        })),\n      };\n}\n\nexport function getCompletionsResult(body: Record<string, any>): Omit<Completions, \"usage\"> {\n  return {\n    id: body[\"id\"],\n    created: new Date(body[\"created\"]),\n    ...getPromptFilterResult(body),\n    choices: (body[\"choices\"] ?? []).map((p: ChoiceOutput) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      ...(!p.content_filter_results\n        ? {}\n        : {\n            contentFilterResults: deserializeContentFilter(p.content_filter_results),\n          }),\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n  };\n}\n\nexport function getChatCompletionsResult(body: Record<string, any>): ChatCompletions {\n  return {\n    id: body[\"id\"],\n    created: new Date(body[\"created\"]),\n    choices: (body[\"choices\"] ?? []).map((p: ChatChoiceOutput) => ({\n      ...(!p.message ? {} : { message: _deserializeMessage(p.message) }),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      ...(!p.delta ? {} : { delta: _deserializeMessage(p.delta) }),\n      ...(!p.content_filter_results\n        ? {}\n        : { contentFilterResults: deserializeContentFilter(p.content_filter_results) }),\n    })),\n    ...getPromptFilterResult(body),\n    ...(!body[\"usage\"]\n      ? {}\n      : {\n          usage: {\n            completionTokens: body[\"usage\"].completion_tokens,\n            promptTokens: body[\"usage\"].prompt_tokens,\n            totalTokens: body[\"usage\"].total_tokens,\n          },\n        }),\n  };\n}\n\nfunction _deserializeMessage(message: ChatMessageOutput): ChatMessage {\n  return {\n    /**\n     * Treating the role and content as optional is because they may not be returned\n     * during the streaming mode. The type should be updated for the streaming mode\n     * and it is a TODO.\n     */\n    ...(!message[\"role\"] ? ({} as { role: ChatRole }) : { role: message[\"role\"] }),\n    ...(!message[\"content\"] ? ({} as { content: string }) : { content: message[\"content\"] }),\n    ...(!message[\"name\"] ? {} : { name: message[\"name\"] }),\n    ...(!message.function_call\n      ? {}\n      : {\n          functionCall: {\n            name: message.function_call?.[\"name\"],\n            arguments: message.function_call?.[\"arguments\"],\n          },\n        }),\n    ...(!message.context\n      ? {}\n      : {\n          context: {\n            ...(!message.context.messages\n              ? {}\n              : {\n                  messages: message.context.messages.map((m) => {\n                    return _deserializeMessage(m);\n                  }),\n                }),\n          },\n        }),\n  };\n}\n\nfunction deserializeContentFilter(result: ContentFilterResultsOutput): ContentFilterResults {\n  if (result.error) {\n    return {\n      error: {\n        code: result.error.code,\n        message: result.error.message,\n        details: result.error.details ?? [],\n      },\n    };\n  }\n  return {\n    ...(!result.sexual\n      ? {}\n      : {\n          sexual: {\n            severity: result.sexual?.[\"severity\"],\n            filtered: result.sexual?.[\"filtered\"],\n          },\n        }),\n    ...(!result.violence\n      ? {}\n      : {\n          violence: {\n            severity: result.violence?.[\"severity\"],\n            filtered: result.violence?.[\"filtered\"],\n          },\n        }),\n    ...(!result.hate\n      ? {}\n      : {\n          hate: {\n            severity: result.hate?.[\"severity\"],\n            filtered: result.hate?.[\"filtered\"],\n          },\n        }),\n    ...(!result.self_harm\n      ? {}\n      : {\n          selfHarm: {\n            severity: result.self_harm?.[\"severity\"],\n            filtered: result.self_harm?.[\"filtered\"],\n          },\n        }),\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nexport function wrapError<T>(f: () => T, message: string): T {\n  try {\n    const result = f();\n    return result;\n  } catch (cause) {\n    throw new Error(`${message}: ${cause}`, { cause });\n  }\n}\n\nfunction tocamelCase(str: string): string {\n  return str.replace(/([_][a-z])/g, (group) => group.toUpperCase().replace(\"_\", \"\"));\n}\n\n/**\n * Rename keys to camel case.\n * @param obj - The object to rename keys to camel case\n * @returns The object with keys renamed to camel case\n */\nexport function renameKeysToCamelCase(obj: Record<string, any>): Record<string, any> {\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    const newKey = tocamelCase(key);\n    if (newKey !== key) {\n      delete obj[key];\n    }\n    obj[newKey] =\n      typeof value === \"object\"\n        ? Array.isArray(value)\n          ? value.map((v) => renameKeysToCamelCase(v))\n          : renameKeysToCamelCase(value)\n        : value;\n  }\n  return obj;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { EventMessage, iterateSseStream } from \"@azure/core-sse\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { wrapError } from \"./util.js\";\n\nexport async function getSSEs(\n  response: StreamableMethod<unknown>\n): Promise<AsyncIterable<EventMessage>> {\n  const chunkIterator = await getStream(response);\n  return iterateSseStream(chunkIterator);\n}\n\nasync function getStream<TResponse>(\n  response: StreamableMethod<TResponse>\n): Promise<AsyncIterable<Uint8Array>> {\n  const { body, status } = await response.asNodeStream();\n  if (status !== \"200\" && body !== undefined) {\n    const text = await streamToText(body);\n    throw wrapError(() => JSON.parse(text).error, \"Error parsing response body\");\n  }\n  if (!body) throw new Error(\"No stream found in response. Did you enable the stream option?\");\n  return body as AsyncIterable<Uint8Array>;\n}\n\nfunction streamToText(stream: NodeJS.ReadableStream): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const buffer: Buffer[] = [];\n\n    stream.on(\"data\", (chunk) => {\n      if (Buffer.isBuffer(chunk)) {\n        buffer.push(chunk);\n      } else {\n        buffer.push(Buffer.from(chunk));\n      }\n    });\n    stream.on(\"end\", () => {\n      resolve(Buffer.concat(buffer).toString(\"utf8\"));\n    });\n    stream.on(\"error\", (e) => {\n      if (e && e?.name === \"AbortError\") {\n        reject(e);\n      } else {\n        reject(\n          new RestError(`Error reading response as text: ${e.message}`, {\n            code: RestError.PARSE_ERROR,\n          })\n        );\n      }\n    });\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getSSEs } from \"./getSSEs.js\";\nimport { wrapError } from \"./util.js\";\n\nexport async function* getOaiSSEs<TEvent>(\n  response: StreamableMethod<unknown>,\n  toEvent: (obj: Record<string, any>) => TEvent\n): AsyncIterable<TEvent> {\n  const stream = await getSSEs(response);\n  let isDone = false;\n  for await (const event of stream) {\n    if (isDone) {\n      // handle a case where the service sends excess stream\n      // data after the [DONE] event\n      continue;\n    } else if (event.data === \"[DONE]\") {\n      isDone = true;\n    } else {\n      yield toEvent(\n        wrapError(\n          () => JSON.parse(event.data),\n          \"Error parsing an event. See 'cause' for more details\"\n        )\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport {\n  FormDataMap,\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport type { FormData } from \"formdata-node\";\nimport type { FormDataEncoder } from \"form-data-encoder\";\nimport { Readable } from \"stream\";\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicyWithFileUpload\";\n\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataWithFileUploadPolicy(boundary?: string): PipelinePolicy {\n  return {\n    name: formDataPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (request.formData) {\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n          request.body = wwwFormUrlEncode(request.formData);\n          request.formData = undefined;\n        } else {\n          await prepareFormData(request.formData, request, boundary);\n        }\n      }\n      return next(request);\n    },\n  };\n}\n\nfunction wwwFormUrlEncode(formData: FormDataMap): string {\n  const urlSearchParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(formData)) {\n    if (Array.isArray(value)) {\n      for (const subValue of value) {\n        urlSearchParams.append(key, subValue.toString());\n      }\n    } else {\n      urlSearchParams.append(key, value.toString());\n    }\n  }\n  return urlSearchParams.toString();\n}\n\nlet formDataConstructor: typeof FormData;\nlet formDataEncoderConstructor: typeof FormDataEncoder;\n\nasync function getFormData(): Promise<typeof formDataConstructor> {\n  if (!formDataConstructor) {\n    formDataConstructor = (await import(\"formdata-node\")).FormData;\n  }\n  return formDataConstructor;\n}\n\nasync function getFormDataEncoder(): Promise<typeof formDataEncoderConstructor> {\n  if (!formDataEncoderConstructor) {\n    formDataEncoderConstructor = (await import(\"form-data-encoder\")).FormDataEncoder;\n  }\n  return formDataEncoderConstructor;\n}\n\nasync function prepareFormData(\n  formData: FormDataMap,\n  request: PipelineRequest,\n  boundary?: string\n): Promise<void> {\n  const FormData = await getFormData();\n  const requestForm = new FormData();\n  for (const formKey of Object.keys(formData)) {\n    const formValue = formData[formKey];\n    if (Array.isArray(formValue)) {\n      for (const subValue of formValue) {\n        requestForm.append(formKey, subValue);\n      }\n    } else {\n      requestForm.append(formKey, formValue);\n    }\n  }\n  const FormDataEncoder = await getFormDataEncoder();\n  const encoder = boundary\n    ? new FormDataEncoder(requestForm, boundary)\n    : new FormDataEncoder(requestForm);\n  const body = Readable.from(encoder.encode());\n  request.body = body;\n  request.formData = undefined;\n  const contentType = request.headers.get(\"Content-Type\");\n  if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n    request.headers.set(\"Content-Type\", encoder.contentType);\n  }\n  const contentLength = encoder.contentLength;\n  if (contentLength !== undefined) {\n    request.headers.set(\"Content-Length\", contentLength);\n  }\n}\n\nlet fileConstructor: typeof File;\n\nasync function getFile(): Promise<typeof fileConstructor> {\n  if (!fileConstructor) {\n    fileConstructor = typeof File === \"function\" ? File : (await import(\"formdata-node\")).File;\n  }\n  return fileConstructor;\n}\n\nexport async function createFile(data: Uint8Array | string): Promise<File> {\n  const File = await getFile();\n  return new File([data], \"placeholder.wav\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport {\n  ChatCompletions,\n  ChatMessage,\n  Completions,\n  Embeddings,\n  ImageGenerations,\n  ImageLocation,\n} from \"../models/models.js\";\nimport {\n  GetChatCompletionsOptions as GeneratedGetChatCompletionsOptions,\n  GetChatCompletionsWithAzureExtensionsOptions,\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  ImageGenerationOptions,\n} from \"../models/options.js\";\nimport {\n  BeginAzureBatchImageGeneration202Response,\n  BeginAzureBatchImageGenerationDefaultResponse,\n  BeginAzureBatchImageGenerationLogicalResponse,\n  ChatMessage as GeneratedChatMessage,\n  OpenAIContext as Client,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetChatCompletionsWithAzureExtensions200Response,\n  GetChatCompletionsWithAzureExtensionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  ImageGenerationsOutput,\n  ImagePayloadOutput,\n  getLongRunningPoller,\n  isUnexpected,\n} from \"../rest/index.js\";\nimport { getChatCompletionsResult, getCompletionsResult } from \"./deserializers.js\";\nimport { getOaiSSEs } from \"./oaiSse.js\";\nimport { GetChatCompletionsOptions } from \"./models.js\";\nimport {\n  AudioResult,\n  AudioResultFormat,\n  AudioResultSimpleJson,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n} from \"../models/audio.js\";\nimport { createFile } from \"./policies/formDataPolicy.js\";\nimport { renameKeysToCamelCase } from \"./util.js\";\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  input: string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: { user: options?.user, model: options?.model, input: input },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    data: (result.body[\"data\"] ?? []).map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  input: string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, input, deploymentId, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: prompt,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      logprobs: options?.logprobs,\n      echo: options?.echo,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      best_of: options?.bestOf,\n      stream: options?.stream,\n      model: options?.model,\n    },\n  });\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): Promise<Completions> {\n  const result = await _getCompletionsSend(context, prompt, deploymentId, options);\n  return _getCompletionsDeserialize(result);\n}\n\nexport function _getChatCompletionsSend(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GeneratedGetChatCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      messages: parseChatMessage(messages),\n      functions: options?.functions,\n      function_call: options?.functionCall,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      stream: options?.stream,\n      model: options?.model,\n      dataSources: options?.dataSources,\n    },\n  });\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      message: !p.message ? undefined : (p.message as any),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta\n        ? undefined\n        : {\n            role: p.delta?.[\"role\"],\n            content: p.delta?.[\"content\"],\n            name: p.delta?.[\"name\"],\n            functionCall: !p.delta?.function_call\n              ? undefined\n              : {\n                  name: p.delta?.function_call?.[\"name\"],\n                  arguments: p.delta?.function_call?.[\"arguments\"],\n                },\n            context: !p.delta?.context\n              ? undefined\n              : {\n                  messages: !p.delta?.context?.messages\n                    ? undefined\n                    : (p.delta?.context?.messages as any),\n                },\n          },\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\nexport function _getChatCompletionsWithAzureExtensionsSend(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsWithAzureExtensionsOptions = { requestOptions: {} }\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  return context\n    .path(\"/deployments/{deploymentId}/extensions/chat/completions\", deploymentId)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        messages: parseChatMessage(messages),\n        functions: options?.functions,\n        function_call: options?.functionCall,\n        max_tokens: options?.maxTokens,\n        temperature: options?.temperature,\n        top_p: options?.topP,\n        logit_bias: options?.logitBias,\n        user: options?.user,\n        n: options?.n,\n        stop: options?.stop,\n        presence_penalty: options?.presencePenalty,\n        frequency_penalty: options?.frequencyPenalty,\n        stream: options?.stream,\n        model: options?.model,\n        dataSources: options?.dataSources,\n      },\n    });\n}\n\nexport async function _getChatCompletionsWithAzureExtensionsDeserialize(\n  result:\n    | GetChatCompletionsWithAzureExtensions200Response\n    | GetChatCompletionsWithAzureExtensionsDefaultResponse\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: new Date(result.body[\"created\"]),\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      message: !p.message ? undefined : (p.message as any),\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta\n        ? undefined\n        : {\n            role: p.delta?.[\"role\"],\n            content: p.delta?.[\"content\"],\n            name: p.delta?.[\"name\"],\n            functionCall: !p.delta?.function_call\n              ? undefined\n              : {\n                  name: p.delta?.function_call?.[\"name\"],\n                  arguments: p.delta?.function_call?.[\"arguments\"],\n                },\n            context: !p.delta?.context\n              ? undefined\n              : {\n                  messages: !p.delta?.context?.messages\n                    ? undefined\n                    : (p.delta?.context?.messages as any),\n                },\n          },\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    promptFilterResults: (result.body[\"prompt_annotations\"] ?? []).map((p) => ({\n      promptIndex: p[\"prompt_index\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * This is an Azure-specific version of chat completions that supports integration with configured data sources and\n * other augmentations to the base chat completions capabilities.\n */\nexport async function getChatCompletionsWithAzureExtensions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsWithAzureExtensionsOptions = { requestOptions: {} }\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsWithAzureExtensionsSend(\n    context,\n    messages,\n    deploymentId,\n    options\n  );\n  return _getChatCompletionsWithAzureExtensionsDeserialize(result);\n}\n\nexport function _beginAzureBatchImageGenerationSend(\n  context: Client,\n  prompt: string,\n  options: ImageGenerationOptions = { requestOptions: {} }\n): StreamableMethod<\n  | BeginAzureBatchImageGeneration202Response\n  | BeginAzureBatchImageGenerationDefaultResponse\n  | BeginAzureBatchImageGenerationLogicalResponse\n> {\n  return context.path(\"/images/generations:submit\").post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: prompt,\n      n: options?.n,\n      size: options?.size,\n      response_format: options?.responseFormat,\n      user: options?.user,\n    },\n  });\n}\n\nexport function listCompletions(\n  context: Client,\n  prompt: string[],\n  deploymentName: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): AsyncIterable<Omit<Completions, \"usage\">> {\n  const response = _getCompletionsSend(context, prompt, deploymentName, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getCompletionsResult);\n}\n\nexport async function getImages(\n  context: Client,\n  prompt: string,\n  options: ImageGenerationOptions = { requestOptions: {} }\n): Promise<ImageGenerations> {\n  const response = await _beginAzureBatchImageGenerationSend(context, prompt, options);\n  if (isUnexpected(response)) {\n    // Check for response from OpenAI\n    const body = response.body as unknown as ImageGenerations;\n    if (body.created && body.data) {\n      return body;\n    }\n    throw response.body.error;\n  }\n\n  if (response.status === \"202\") {\n    const poller = await getLongRunningPoller(\n      context,\n      response as BeginAzureBatchImageGeneration202Response\n    );\n    const result = await poller.pollUntilDone();\n    return getImageResultsDeserialize(result);\n  } else {\n    return getImageResultsDeserialize(response);\n  }\n}\n\nexport function listChatCompletions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentName: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): AsyncIterable<ChatCompletions> {\n  const response = _getChatCompletionsSendX(context, messages, deploymentName, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getChatCompletionsResult);\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSendX(context, messages, deploymentId, options);\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  return getChatCompletionsResult(result.body);\n}\n\nfunction convertResultTypes({ created, data }: ImageGenerationsOutput): ImageGenerations {\n  if (typeof (data[0] as ImageLocation).url === \"string\") {\n    return {\n      created: new Date(created),\n      data: data as ImageLocation[],\n    };\n  } else {\n    return {\n      created: new Date(created),\n      data: data.map((item) => {\n        return {\n          base64Data: (item as ImagePayloadOutput).b64_json,\n        };\n      }),\n    };\n  }\n}\n\nfunction getImageResultsDeserialize(\n  response:\n    | BeginAzureBatchImageGeneration202Response\n    | BeginAzureBatchImageGenerationDefaultResponse\n    | BeginAzureBatchImageGenerationLogicalResponse\n): ImageGenerations {\n  if (isUnexpected(response) || !response.body.result) {\n    throw response.body.error;\n  }\n\n  const result = response.body.result;\n  return convertResultTypes(result);\n}\n\nfunction _getChatCompletionsSendX(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentName: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<\n  | GetChatCompletionsWithAzureExtensions200Response\n  | GetChatCompletionsWithAzureExtensionsDefaultResponse\n> {\n  return options.azureExtensionOptions?.extensions\n    ? _getChatCompletionsWithAzureExtensionsSend(context, messages, deploymentName, {\n        ...options,\n        dataSources: options.azureExtensionOptions?.extensions,\n      })\n    : _getChatCompletionsSend(context, messages, deploymentName, options);\n}\n\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranslationOptions\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranslationOptions\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranslationOptions,\n  inputOptions?: GetAudioTranslationOptions\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { temperature, prompt, model, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentId}/audio/translations\", deploymentName)\n    .post({\n      body: {\n        file: await createFile(fileContent),\n        ...(response_format && { response_format }),\n        ...(temperature !== undefined ? { temperature } : {}),\n        ...(prompt && { prompt }),\n        ...(model && { model }),\n      },\n      ...rest,\n      contentType: \"multipart/form-data\",\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (renameKeysToCamelCase(body) as AudioResult<Format>);\n}\n\n/**\n * Returns the transcription of an audio file in a simple JSON format.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a simple JSON format.\n */\nexport async function getAudioTranscription(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranscriptionOptions\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the transcription of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a format of your choice.\n */\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranscriptionOptions\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranscriptionOptions,\n  inputOptions?: GetAudioTranscriptionOptions\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { temperature, language, prompt, model, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentId}/audio/transcriptions\", deploymentName)\n    .post({\n      body: {\n        file: await createFile(fileContent),\n        ...(response_format && { response_format }),\n        ...(language && { language }),\n        ...(temperature !== undefined ? { temperature } : {}),\n        ...(prompt && { prompt }),\n        ...(model && { model }),\n      },\n      ...rest,\n      contentType: \"multipart/form-data\",\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (renameKeysToCamelCase(body) as AudioResult<Format>);\n}\n\nfunction parseChatMessage(messages: ChatMessage[]): GeneratedChatMessage[] {\n  return messages.map((p: ChatMessage) => ({\n    role: p.role,\n    content: p.content ?? null,\n    name: p.name,\n    function_call: p.functionCall,\n    context: p.context,\n  }));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { PipelinePolicy } from \"@azure/core-rest-pipeline\";\n\nexport function nonAzurePolicy(): PipelinePolicy {\n  const policy: PipelinePolicy = {\n    name: \"openAiEndpoint\",\n    sendRequest: (request, next) => {\n      const obj = new URL(request.url);\n      const parts = obj.pathname.split(\"/\");\n      switch (parts[parts.length - 1]) {\n        case \"completions\":\n          if (parts[parts.length - 2] === \"chat\") {\n            obj.pathname = `${parts[1]}/chat/completions`;\n          } else {\n            obj.pathname = `${parts[1]}/completions`;\n          }\n          break;\n        case \"embeddings\":\n          obj.pathname = `${parts[1]}/embeddings`;\n          break;\n        case \"generations:submit\":\n          obj.pathname = `${parts[1]}/images/generations`;\n          break;\n        case \"transcriptions\":\n          obj.pathname = `${parts[1]}/audio/transcriptions`;\n          break;\n        case \"translations\":\n          obj.pathname = `${parts[1]}/audio/translations`;\n          break;\n      }\n      obj.searchParams.delete(\"api-version\");\n      request.url = obj.toString();\n      return next(request);\n    },\n  };\n  return policy;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  OpenAIClientOptions,\n  OpenAIContext,\n  createOpenAI,\n  getChatCompletions,\n  getCompletions,\n  getEmbeddings,\n  getImages,\n  listChatCompletions,\n  listCompletions,\n} from \"./api/index.js\";\nimport {\n  ChatCompletions,\n  ChatMessage,\n  Completions,\n  Embeddings,\n  ImageGenerations,\n} from \"./models/models.js\";\nimport {\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  ImageGenerationOptions,\n} from \"./models/options.js\";\nimport { GetChatCompletionsOptions } from \"./api/models.js\";\nimport {\n  AudioResultFormat,\n  AudioResult,\n  GetAudioTranscriptionOptions,\n  GetAudioTranslationOptions,\n  AudioResultSimpleJson,\n} from \"./models/audio.js\";\nimport { nonAzurePolicy } from \"./api/policies/nonAzure.js\";\nimport { formDataPolicyName } from \"@azure/core-rest-pipeline\";\nimport { formDataWithFileUploadPolicy } from \"./api/policies/formDataPolicy.js\";\nimport { getAudioTranscription, getAudioTranslation } from \"./api/operations.js\";\n\nexport { OpenAIClientOptions } from \"./api/OpenAIContext.js\";\n\nexport class OpenAIClient {\n  private _client: OpenAIContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.\n   *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | OpenAIClientOptions = {},\n    options: OpenAIClientOptions = {}\n  ) {\n    let opts: OpenAIClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createOpenAI(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: nonAzurePolicy(),\n              },\n            ],\n          }),\n    });\n    this._client.pipeline.removePolicy({ name: formDataPolicyName });\n    this._client.pipeline.addPolicy(formDataWithFileUploadPolicy());\n  }\n\n  /**\n   * Returns textual completions as configured for a given prompt.\n   * @param deploymentName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this completions request.\n   * @returns The completions for the given prompt.\n   */\n  getCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = { requestOptions: {} }\n  ): Promise<Completions> {\n    this.setModel(deploymentName, options);\n    return getCompletions(this._client, prompt, deploymentName, options);\n  }\n\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  listCompletions(\n    deploymentName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = {}\n  ): AsyncIterable<Omit<Completions, \"usage\">> {\n    this.setModel(deploymentName, options);\n    return listCompletions(this._client, prompt, deploymentName, options);\n  }\n\n  /**\n   * Return the computed embeddings for a given prompt.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param input - The prompt to use for this request.\n   * @param options - The embeddings options for this embeddings request.\n   * @returns The embeddings for the given prompt.\n   */\n  getEmbeddings(\n    deploymentName: string,\n    input: string[],\n    options: GetEmbeddingsOptions = { requestOptions: {} }\n  ): Promise<Embeddings> {\n    this.setModel(deploymentName, options);\n    return getEmbeddings(this._client, input, deploymentName, options);\n  }\n\n  /**\n   * Get chat completions for provided chat context messages.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this completions request.\n   * @returns The chat completions for the given chat context messages.\n   */\n  getChatCompletions(\n    deploymentName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): Promise<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return getChatCompletions(this._client, messages, deploymentName, options);\n  }\n\n  /**\n   * Lists the chat completions tokens as they become available for a chat context.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this chat completions request.\n   * @returns An asynchronous iterable of chat completions tokens.\n   */\n  listChatCompletions(\n    deploymentName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): AsyncIterable<ChatCompletions> {\n    this.setModel(deploymentName, options);\n    return listChatCompletions(this._client, messages, deploymentName, options);\n  }\n\n  /**\n   * Starts the generation of a batch of images from a text caption\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this image request.\n   * @returns The image generation response (containing url or base64 data).\n   */\n  getImages(\n    prompt: string,\n    options: ImageGenerationOptions = { requestOptions: {} }\n  ): Promise<ImageGenerations> {\n    return getImages(this._client, prompt, options);\n  }\n\n  /**\n   * Returns the transcription of an audio file in a simple JSON format.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a simple JSON format.\n   */\n  async getAudioTranscription(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranscriptionOptions\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the transcription of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to transcribe.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio transcription request.\n   * @returns The audio transcription result in a format of your choice.\n   */\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranscriptionOptions\n  ): Promise<AudioResult<Format>>;\n  // implementation\n  async getAudioTranscription<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranscriptionOptions,\n    inputOptions?: GetAudioTranscriptionOptions\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranscription(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n    return getAudioTranscription(\n      this._client,\n      deploymentName,\n      fileContent,\n      response_format,\n      options\n    );\n  }\n\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    options?: GetAudioTranslationOptions\n  ): Promise<AudioResultSimpleJson>;\n  /**\n   * Returns the translation of an audio file.\n   * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param fileContent - The content of the audio file to translate.\n   * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n   * @param options - The options for this audio translation request.\n   * @returns The audio translation result.\n   */\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    format: Format,\n    options?: GetAudioTranslationOptions\n  ): Promise<AudioResult<Format>>;\n  // implementation\n  async getAudioTranslation<Format extends AudioResultFormat>(\n    deploymentName: string,\n    fileContent: Uint8Array,\n    formatOrOptions?: Format | GetAudioTranslationOptions,\n    inputOptions?: GetAudioTranslationOptions\n  ): Promise<AudioResult<Format>> {\n    const options =\n      inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n    const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n    this.setModel(deploymentName, options);\n    if (response_format === undefined) {\n      return getAudioTranslation(this._client, deploymentName, fileContent, options) as Promise<\n        AudioResult<Format>\n      >;\n    }\n    return getAudioTranslation(this._client, deploymentName, fileContent, response_format, options);\n  }\n\n  private setModel(model: string, options: { model?: string }): void {\n    if (!this._isAzure) {\n      options.model = model;\n    }\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n"],"names":["createClientLogger","getClient","createHttpPoller","iterateSseStream","RestError","__await","__asyncValues","Readable","operationOptionsToRequestParameters","__rest","formDataPolicyName","isTokenCredential"],"mappings":";;;;;;;;;;;AAAA;AACA;AAYA;;;;AAIG;MACU,mBAAmB,CAAA;AAG9B;;;;;AAKG;AACH,IAAA,WAAA,CAAY,GAAW,EAAA;QACrB,IAAI,CAAC,GAAG,EAAE;AACR,YAAA,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACnD,SAAA;AAED,QAAA,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;KAC5B;AAED;;AAEG;AACH,IAAA,IAAW,GAAG,GAAA;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;AAED;;;;;;;AAOG;AACI,IAAA,MAAM,CAAC,MAAc,EAAA;AAC1B,QAAA,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;KAC/B;AACF,CAAA;AAED,SAAS,SAAS,CAAC,GAAW,EAAA;AAC5B,IAAA,OAAO,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,CAAU,OAAA,EAAA,GAAG,EAAE,CAAC;AAC3D;;ACzDA;AACA;AAEA;;;;;;AAMG;AAGI,MAAM,MAAM,GAAGA,2BAAkB,CAAC,QAAQ,CAAC;;ACZlD;AACA;AAEA;;;;;;AAMG;AAOH;;;;;;AAMG;AACW,SAAU,YAAY,CAClC,QAAgB,EAChB,WAA4C,EAC5C,OAAA,GAAyB,EAAE,EAAA;;IAE3B,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,OAAO,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,EAAG,QAAQ,CAAA,OAAA,CAAS,CAAC;IACxD,OAAO,CAAC,UAAU,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,UAAU,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,oBAAoB,CAAC;AAChE,IAAA,OAAO,GACF,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,OAAO,CACV,EAAA,EAAA,WAAW,EAAE;YACX,MAAM,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,8CAA8C,CAAC;YACvF,gBAAgB,EAAE,MAAA,CAAA,EAAA,GAAA,OAAO,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,gBAAgB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS;AACrE,SAAA,EAAA,CACF,CAAC;IAEF,MAAM,aAAa,GAAG,CAAA,iCAAA,CAAmC,CAAC;IAC1D,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;UAChE,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,CAAI,CAAA,EAAA,aAAa,CAAE,CAAA;AAChE,UAAE,CAAA,EAAG,aAAa,CAAA,CAAE,CAAC;AACzB,IAAA,OAAO,GACF,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,OAAO,CACV,EAAA,EAAA,gBAAgB,EAAE;YAChB,eAAe;AAChB,SAAA,EACD,cAAc,EAAE;YACd,MAAM,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,cAAc,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,MAAM,CAAC,IAAI;AACtD,SAAA,EAAA,CACF,CAAC;IAEF,MAAM,MAAM,GAAGC,oBAAS,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAkB,CAAC;AAEzE,IAAA,OAAO,MAAM,CAAC;AAChB;;ACxDA;AACA;AA2BA,MAAM,WAAW,GAA6B;IAC5C,6CAA6C,EAAE,CAAC,KAAK,CAAC;IACtD,8CAA8C,EAAE,CAAC,KAAK,CAAC;IACvD,mDAAmD,EAAE,CAAC,KAAK,CAAC;IAC5D,8DAA8D,EAAE,CAAC,KAAK,CAAC;IACvE,sCAAsC,EAAE,CAAC,KAAK,CAAC;IAC/C,iCAAiC,EAAE,CAAC,KAAK,CAAC;AAC1C,IAAA,gCAAgC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;CACjD,CAAC;AA4BI,SAAU,YAAY,CAC1B,QAciD,EAAA;IAQjD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC1D,IAAA,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,KAAX,IAAA,IAAA,WAAW,KAAX,KAAA,CAAA,GAAA,WAAW,GAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACzD,IAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;AACvC,IAAA,IAAI,WAAW,GAAG,WAAW,CAAC,CAAG,EAAA,MAAM,CAAI,CAAA,EAAA,GAAG,CAAC,QAAQ,CAAE,CAAA,CAAC,CAAC;IAC3D,IAAI,CAAC,WAAW,EAAE;QAChB,WAAW,GAAG,0BAA0B,CAAC,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;AAChE,KAAA;IACD,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AAED,SAAS,0BAA0B,CAAC,MAAc,EAAE,IAAY,EAAA;;IAC9D,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;;IAKlC,IAAI,UAAU,GAAG,CAAC,CAAC,EACjB,YAAY,GAAa,EAAE,CAAC;;AAG9B,IAAA,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;;;AAGtD,QAAA,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC3B,SAAS;AACV,SAAA;AACD,QAAA,MAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;;QAE7C,MAAM,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QAGhD,IAAI,KAAK,GAAG,IAAI,CAAC;AACjB,QAAA,KAAK,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5F,IAAI,CAAA,CAAA,EAAA,GAAA,cAAc,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,CAAC,GAAG,CAAC,KAAI,CAAA,MAAA,cAAc,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,CAAC,GAAG,CAAC,MAAK,CAAC,CAAC,EAAE;gBAChF,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAC/C,GAAG,GAAG,CAAA,EAAA,GAAA,cAAc,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,CAAC;;;;;AAKlC,gBAAA,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,CAAA,EAAG,CAAA,EAAA,GAAA,cAAc,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC,IAAI,CAC1E,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CACnB,CAAC;gBAEF,IAAI,CAAC,SAAS,EAAE;oBACd,KAAK,GAAG,KAAK,CAAC;oBACd,MAAM;AACP,iBAAA;gBACD,SAAS;AACV,aAAA;;;;YAKD,IAAI,cAAc,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE;gBACtC,KAAK,GAAG,KAAK,CAAC;gBACd,MAAM;AACP,aAAA;AACF,SAAA;;;AAID,QAAA,IAAI,KAAK,IAAI,aAAa,CAAC,MAAM,GAAG,UAAU,EAAE;AAC9C,YAAA,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC;YAClC,YAAY,GAAG,KAAK,CAAC;AACtB,SAAA;AACF,KAAA;AAED,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,iBAAiB,CAAC,MAAc,EAAA;IACvC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACtC,IAAA,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACjC;;ACjKA;AACA;AAwDO,eAAe,oBAAoB,CACxC,MAAc,EACd,eAAwB,EACxB,OAAA,GAAqE,EAAE,EAAA;;AAEvE,IAAA,MAAM,MAAM,GAAkC;AAC5C,QAAA,aAAa,EAAE,eAAe,CAAC,OAAO,CAAC,MAAM;AAC7C,QAAA,WAAW,EAAE,eAAe,CAAC,OAAO,CAAC,GAAG;QACxC,kBAAkB,EAAE,YAAW;;;;AAI7B,YAAA,OAAO,cAAc,CAAC,eAAe,CAAC,CAAC;SACxC;AACD,QAAA,eAAe,EAAE,OAAO,IAAI,KAAI;;;;;YAK9B,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAJ,IAAI,GAAI,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACvF,YAAA,MAAM,WAAW,GAAG,cAAc,CAAC,QAAmB,CAAC,CAAC;AACxD,YAAA,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC;AACnF,YAAA,OAAO,WAAW,CAAC;SACpB;KACF,CAAC;IAEF,OAAO,CAAC,qBAAqB,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,qBAAqB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAI,CAAC;AACtE,IAAA,OAAOC,wBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3C,CAAC;AAED;;;;AAIG;AACH,SAAS,cAAc,CAA+B,QAAiB,EAAA;IACrE,IAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACjC,MAAM,IAAI,SAAS,CAAC,CAAA,oDAAA,EAAuD,QAAQ,CAAC,MAAM,CAAE,CAAA,CAAC,CAAC;AAC/F,KAAA;IAED,OAAO;AACL,QAAA,YAAY,EAAE,QAAQ;AACtB,QAAA,WAAW,kCACN,QAAQ,CAAA,EAAA,EACX,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC5C,IAAI,EAAE,QAAQ,CAAC,IAAI,EACpB,CAAA;KACF,CAAC;AACJ;;ACzGA;AACA;AAoBA;AACM,SAAU,YAAY,CAC1B,QAAgB,EAChB,UAA2C,EAC3C,UAA+B,EAAE,EAAA;IAEjC,MAAM,OAAO,GAAG,QAAQ,CAAC;IACzB,MAAM,aAAa,GAAGD,YAAS,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AAC9D,IAAA,OAAO,aAAa,CAAC;AACvB;;AC9BA;AACA;AAqBA,SAAS,qBAAqB,CAAC,IAAyB,EAAA;;AAGtD,IAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,oBAAoB,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,IAAI,CAAC,uBAAuB,CAAC,CAAC;AACxE,IAAA,OAAO,CAAC,GAAG;AACT,UAAE,EAAE;AACJ,UAAE;YACE,mBAAmB,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAA2B,MAAK,MAAA,CAAA,MAAA,CAAA,EAC5D,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC,KAC1B,CAAC,CAAC,CAAC,sBAAsB;AAC3B,kBAAE,EAAE;AACJ,kBAAE;AACE,oBAAA,oBAAoB,EAAE,wBAAwB,CAAC,CAAC,CAAC,sBAAsB,CAAC;AACzE,iBAAA,GACL,CAAC;SACJ,CAAC;AACR,CAAC;AAEK,SAAU,oBAAoB,CAAC,IAAyB,EAAA;;AAC5D,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EACE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EACd,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAA,EAC/B,qBAAqB,CAAC,IAAI,CAAC,CAC9B,EAAA,EAAA,OAAO,EAAE,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,GAAG,CAAC,CAAC,CAAe,MACnD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,EACf,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,EACd,GAAC,CAAC,CAAC,CAAC,sBAAsB;AAC3B,cAAE,EAAE;AACJ,cAAE;AACE,gBAAA,oBAAoB,EAAE,wBAAwB,CAAC,CAAC,CAAC,sBAAsB,CAAC;AACzE,aAAA,MACL,QAAQ,EACN,CAAC,CAAC,QAAQ,KAAK,IAAI;AACjB,kBAAE,IAAI;AACN,kBAAE;AACE,oBAAA,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC5B,oBAAA,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAC3C,oBAAA,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC;AACvC,oBAAA,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;iBACtC,EACP,YAAY,EAAE,CAAC,CAAC,eAAe,CAAC,EAAA,CAAA,CAChC,CAAC,EACH,CAAA,CAAA;AACJ,CAAC;AAEK,SAAU,wBAAwB,CAAC,IAAyB,EAAA;;IAChE,OACE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EACd,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAClC,OAAO,EAAE,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,CAAC,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,EAAE,GAAG,CAAC,CAAC,CAAmB,MAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,GACxD,CAAC,CAAC,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,EACjE,EAAA,EAAA,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,EACjB,YAAY,EAAE,CAAC,CAAC,eAAe,CAAC,EAC7B,CAAA,GAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,KACvD,CAAC,CAAC,CAAC,sBAAsB;AAC3B,cAAE,EAAE;cACF,EAAE,oBAAoB,EAAE,wBAAwB,CAAC,CAAC,CAAC,sBAAsB,CAAC,EAAE,GAChF,CAAC,EAAA,EACA,qBAAqB,CAAC,IAAI,CAAC,CAC3B,GAAC,CAAC,IAAI,CAAC,OAAO,CAAC;AAChB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,KAAK,EAAE;AACL,gBAAA,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,iBAAiB;AACjD,gBAAA,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,aAAa;AACzC,gBAAA,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,YAAY;AACxC,aAAA;AACF,SAAA,EACL,CAAA;AACJ,CAAC;AAED,SAAS,mBAAmB,CAAC,OAA0B,EAAA;;AACrD,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,GAMM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAI,EAAyB,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,EAAC,GAC1E,CAAC,OAAO,CAAC,SAAS,CAAC,GAAI,EAA0B,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,EAAE,EACpF,GAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,EAClD,GAAC,CAAC,OAAO,CAAC,aAAa;AACxB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,YAAY,EAAE;AACZ,gBAAA,IAAI,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,MAAM,CAAC;AACrC,gBAAA,SAAS,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,WAAW,CAAC;AAChD,aAAA;AACF,SAAA,EACF,GAAC,CAAC,OAAO,CAAC,OAAO;AAClB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,OAAO,qBACD,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ;AAC3B,kBAAE,EAAE;AACJ,kBAAE;AACE,oBAAA,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAI;AAC3C,wBAAA,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAChC,qBAAC,CAAC;AACH,iBAAA,EACN;AACF,SAAA,EACL,CAAA;AACJ,CAAC;AAED,SAAS,wBAAwB,CAAC,MAAkC,EAAA;;IAClE,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,OAAO;AACL,YAAA,KAAK,EAAE;AACL,gBAAA,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI;AACvB,gBAAA,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO;gBAC7B,OAAO,EAAE,MAAA,MAAM,CAAC,KAAK,CAAC,OAAO,mCAAI,EAAE;AACpC,aAAA;SACF,CAAC;AACH,KAAA;AACD,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,GACM,CAAC,MAAM,CAAC,MAAM;AAChB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,MAAM,EAAE;AACN,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACrC,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACtC,aAAA;AACF,SAAA,EACF,GAAC,CAAC,MAAM,CAAC,QAAQ;AAClB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,QAAQ,EAAE;AACR,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACvC,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACxC,aAAA;AACF,SAAA,EACF,GAAC,CAAC,MAAM,CAAC,IAAI;AACd,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,IAAI,EAAE;AACJ,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACnC,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACpC,aAAA;AACF,SAAA,EACF,GAAC,CAAC,MAAM,CAAC,SAAS;AACnB,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,QAAQ,EAAE;AACR,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACxC,gBAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,UAAU,CAAC;AACzC,aAAA;AACF,SAAA,EACL,CAAA;AACJ;;AC3KA;AACA;AAEA;;;;;;AAMG;AAEa,SAAA,SAAS,CAAI,CAAU,EAAE,OAAe,EAAA;IACtD,IAAI;AACF,QAAA,MAAM,MAAM,GAAG,CAAC,EAAE,CAAC;AACnB,QAAA,OAAO,MAAM,CAAC;AACf,KAAA;AAAC,IAAA,OAAO,KAAK,EAAE;AACd,QAAA,MAAM,IAAI,KAAK,CAAC,CAAA,EAAG,OAAO,CAAA,EAAA,EAAK,KAAK,CAAA,CAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;AACpD,KAAA;AACH,CAAC;AAED,SAAS,WAAW,CAAC,GAAW,EAAA;IAC9B,OAAO,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AACrF,CAAC;AAED;;;;AAIG;AACG,SAAU,qBAAqB,CAAC,GAAwB,EAAA;IAC5D,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAClC,QAAA,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,QAAA,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,MAAM,KAAK,GAAG,EAAE;AAClB,YAAA,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,SAAA;QACD,GAAG,CAAC,MAAM,CAAC;YACT,OAAO,KAAK,KAAK,QAAQ;AACvB,kBAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;AACpB,sBAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,qBAAqB,CAAC,CAAC,CAAC,CAAC;AAC5C,sBAAE,qBAAqB,CAAC,KAAK,CAAC;kBAC9B,KAAK,CAAC;AACb,KAAA;AACD,IAAA,OAAO,GAAG,CAAC;AACb;;AC5CA;AACA;AAeO,eAAe,OAAO,CAC3B,QAAmC,EAAA;AAEnC,IAAA,MAAM,aAAa,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,CAAC;AAChD,IAAA,OAAOE,wBAAgB,CAAC,aAAa,CAAC,CAAC;AACzC,CAAC;AAED,eAAe,SAAS,CACtB,QAAqC,EAAA;IAErC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC;AACvD,IAAA,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,KAAK,SAAS,EAAE;AAC1C,QAAA,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,CAAC;AACtC,QAAA,MAAM,SAAS,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,6BAA6B,CAAC,CAAC;AAC9E,KAAA;AACD,IAAA,IAAI,CAAC,IAAI;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;AAC7F,IAAA,OAAO,IAAiC,CAAC;AAC3C,CAAC;AAED,SAAS,YAAY,CAAC,MAA6B,EAAA;IACjD,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,KAAI;QAC7C,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,KAAI;AAC1B,YAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AAC1B,gBAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpB,aAAA;AAAM,iBAAA;gBACL,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACjC,aAAA;AACH,SAAC,CAAC,CAAC;AACH,QAAA,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,MAAK;AACpB,YAAA,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAClD,SAAC,CAAC,CAAC;QACH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,KAAI;AACvB,YAAA,IAAI,CAAC,IAAI,CAAA,CAAC,KAAD,IAAA,IAAA,CAAC,KAAD,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAC,CAAE,IAAI,MAAK,YAAY,EAAE;gBACjC,MAAM,CAAC,CAAC,CAAC,CAAC;AACX,aAAA;AAAM,iBAAA;gBACL,MAAM,CACJ,IAAIC,0BAAS,CAAC,mCAAmC,CAAC,CAAC,OAAO,CAAA,CAAE,EAAE;oBAC5D,IAAI,EAAEA,0BAAS,CAAC,WAAW;AAC5B,iBAAA,CAAC,CACH,CAAC;AACH,aAAA;AACH,SAAC,CAAC,CAAC;AACL,KAAC,CAAC,CAAC;AACL;;AC7DA;AACA;AAcuB,SAAA,UAAU,CAC/B,QAAmC,EACnC,OAA6C,EAAA;;;QAE7C,MAAM,MAAM,GAAG,MAAMC,aAAA,CAAA,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC;QACvC,IAAI,MAAM,GAAG,KAAK,CAAC;;AACnB,YAAA,KAA0B,eAAA,QAAA,GAAAC,mBAAA,CAAA,MAAM,CAAA,YAAA,EAAE,UAAA,GAAA,MAAAD,aAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,UAAA,CAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA;gBAAR,EAAM,GAAA,UAAA,CAAA,KAAA,CAAA;gBAAN,EAAM,GAAA,KAAA,CAAA;gBAArB,MAAM,KAAK,KAAA,CAAA;AACpB,gBAAA,IAAI,MAAM,EAAE;;;oBAGV,SAAS;AACV,iBAAA;AAAM,qBAAA,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;oBAClC,MAAM,GAAG,IAAI,CAAC;AACf,iBAAA;AAAM,qBAAA;oBACL,MAAM,MAAAA,aAAA,CAAA,OAAO,CACX,SAAS,CACP,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAC5B,sDAAsD,CACvD,CACF,CAAA,CAAC;AACH,iBAAA;AACF,aAAA;;;;;;;;;KACF,CAAA,CAAA;AAAA;;ACrCD;AACA;AAqBA;;AAEG;AACI,MAAM,kBAAkB,GAAG,8BAA8B,CAAC;AAEjE;;AAEG;AACG,SAAU,4BAA4B,CAAC,QAAiB,EAAA;IAC5D,OAAO;AACL,QAAA,IAAI,EAAE,kBAAkB;AACxB,QAAA,MAAM,WAAW,CAAC,OAAwB,EAAE,IAAiB,EAAA;YAC3D,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACpB,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBACxD,IAAI,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,mCAAmC,CAAC,KAAK,CAAC,CAAC,EAAE;oBAClF,OAAO,CAAC,IAAI,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClD,oBAAA,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;AAC9B,iBAAA;AAAM,qBAAA;oBACL,MAAM,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC5D,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;KACF,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,QAAqB,EAAA;AAC7C,IAAA,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;AAC9C,IAAA,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AACnD,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxB,YAAA,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;gBAC5B,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAClD,aAAA;AACF,SAAA;AAAM,aAAA;YACL,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/C,SAAA;AACF,KAAA;AACD,IAAA,OAAO,eAAe,CAAC,QAAQ,EAAE,CAAC;AACpC,CAAC;AAED,IAAI,mBAAoC,CAAC;AACzC,IAAI,0BAAkD,CAAC;AAEvD,eAAe,WAAW,GAAA;IACxB,IAAI,CAAC,mBAAmB,EAAE;QACxB,mBAAmB,GAAG,CAAC,MAAM,OAAO,eAAe,CAAC,EAAE,QAAQ,CAAC;AAChE,KAAA;AACD,IAAA,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AAED,eAAe,kBAAkB,GAAA;IAC/B,IAAI,CAAC,0BAA0B,EAAE;QAC/B,0BAA0B,GAAG,CAAC,MAAM,OAAO,mBAAmB,CAAC,EAAE,eAAe,CAAC;AAClF,KAAA;AACD,IAAA,OAAO,0BAA0B,CAAC;AACpC,CAAC;AAED,eAAe,eAAe,CAC5B,QAAqB,EACrB,OAAwB,EACxB,QAAiB,EAAA;AAEjB,IAAA,MAAM,QAAQ,GAAG,MAAM,WAAW,EAAE,CAAC;AACrC,IAAA,MAAM,WAAW,GAAG,IAAI,QAAQ,EAAE,CAAC;IACnC,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC3C,QAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;AACpC,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC5B,YAAA,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;AAChC,gBAAA,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACvC,aAAA;AACF,SAAA;AAAM,aAAA;AACL,YAAA,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACxC,SAAA;AACF,KAAA;AACD,IAAA,MAAM,eAAe,GAAG,MAAM,kBAAkB,EAAE,CAAC;IACnD,MAAM,OAAO,GAAG,QAAQ;AACtB,UAAE,IAAI,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC;AAC5C,UAAE,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;IACrC,MAAM,IAAI,GAAGE,eAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7C,IAAA,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACpB,IAAA,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC7B,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACxD,IAAI,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;QACpE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;AAC1D,KAAA;AACD,IAAA,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5C,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;AACtD,KAAA;AACH,CAAC;AAED,IAAI,eAA4B,CAAC;AAEjC,eAAe,OAAO,GAAA;IACpB,IAAI,CAAC,eAAe,EAAE;QACpB,eAAe,GAAG,OAAO,IAAI,KAAK,UAAU,GAAG,IAAI,GAAG,CAAC,MAAM,OAAO,eAAe,CAAC,EAAE,IAAI,CAAC;AAC5F,KAAA;AACD,IAAA,OAAO,eAAe,CAAC;AACzB,CAAC;AAEM,eAAe,UAAU,CAAC,IAAyB,EAAA;AACxD,IAAA,MAAM,IAAI,GAAG,MAAM,OAAO,EAAE,CAAC;IAC7B,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,CAAC;AAC7C;;AC7HA;AACA;AA0DgB,SAAA,kBAAkB,CAChC,OAAe,EACf,KAAe,EACf,YAAoB,EACpB,OAAgC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;IAEtD,OAAO,OAAO,CAAC,IAAI,CAAC,wCAAwC,EAAE,YAAY,CAAC,CAAC,IAAI,iCAC3EC,8CAAmC,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,aAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,IAAI,EAAE,KAAK,EAAE,OAAO,KAAP,IAAA,IAAA,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAClE,CAAC;AACL,CAAC;AAEM,eAAe,yBAAyB,CAC7C,MAA+D,EAAA;;AAE/D,IAAA,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AACxB,QAAA,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AACzB,KAAA;IAED,OAAO;QACL,IAAI,EAAE,CAAC,CAAA,EAAA,GAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM;AAC5C,YAAA,SAAS,EAAE,CAAC,CAAC,WAAW,CAAC;AACzB,YAAA,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;AAClB,SAAA,CAAC,CAAC;AACH,QAAA,KAAK,EAAE;YACL,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAChD,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;AAC/C,SAAA;KACF,CAAC;AACJ,CAAC;AAED;AACO,eAAe,aAAa,CACjC,OAAe,EACf,KAAe,EACf,YAAoB,EACpB,OAAgC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEtD,IAAA,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC/E,IAAA,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAEe,SAAA,mBAAmB,CACjC,OAAe,EACf,MAAgB,EAChB,YAAoB,EACpB,OAAiC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEvD,IAAA,OAAO,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,YAAY,CAAC,CAAC,IAAI,iCAC5EA,8CAAmC,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,IAAI,EAAE;AACJ,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,WAAW,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,WAAW;AACjC,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACpB,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,CAAC,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,CAAC;AACb,YAAA,QAAQ,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,QAAQ;AAC3B,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,gBAAgB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,eAAe;AAC1C,YAAA,iBAAiB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,gBAAgB;AAC5C,YAAA,OAAO,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,MAAM;AACxB,YAAA,MAAM,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,MAAM;AACvB,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,KAAK;AACtB,SAAA,EAAA,CAAA,CACD,CAAC;AACL,CAAC;AAEM,eAAe,0BAA0B,CAC9C,MAAiE,EAAA;;AAEjE,IAAA,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AACxB,QAAA,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AACzB,KAAA;IAED,OAAO;AACL,QAAA,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACzC,QAAA,mBAAmB,EAAE,CAAC,CAAA,EAAA,GAAA,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,KAAI;;AAAC,YAAA,QAAC;AACzE,gBAAA,WAAW,EAAE,CAAC,CAAC,cAAc,CAAC;AAC9B,gBAAA,oBAAoB,EAAE,CAAC,CAAC,CAAC,sBAAsB;AAC7C,sBAAE,SAAS;AACX,sBAAE;wBACE,MAAM,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,CAAA;AACvC,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCACxD,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AACzD,6BAAA;wBACL,QAAQ,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,CAAA;AAC3C,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCAC1D,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AAC3D,6BAAA;wBACL,IAAI,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,CAAA;AACnC,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCACtD,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AACvD,6BAAA;wBACL,QAAQ,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAA;AAC5C,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCAC3D,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AAC5D,6BAAA;AACN,qBAAA;AACN,aAAA,EAAC;SAAA,CAAC;AACH,QAAA,OAAO,EAAE,CAAC,CAAA,EAAA,GAAA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,KAAI;;AAAC,YAAA,QAAC;AAClD,gBAAA,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;AACf,gBAAA,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;AACjB,gBAAA,oBAAoB,EAAE,CAAC,CAAC,CAAC,sBAAsB;AAC7C,sBAAE,SAAS;AACX,sBAAE;wBACE,MAAM,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,CAAA;AACvC,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCACxD,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAM,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AACzD,6BAAA;wBACL,QAAQ,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,CAAA;AAC3C,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCAC1D,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AAC3D,6BAAA;wBACL,IAAI,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,CAAA;AACnC,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCACtD,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AACvD,6BAAA;wBACL,QAAQ,EAAE,EAAC,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,CAAA;AAC5C,8BAAE,SAAS;AACX,8BAAE;gCACE,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;gCAC3D,QAAQ,EAAE,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,sBAAsB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAS,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAU,CAAC;AAC5D,6BAAA;AACN,qBAAA;AACL,gBAAA,QAAQ,EACN,CAAC,CAAC,QAAQ,KAAK,IAAI;AACjB,sBAAE,IAAI;AACN,sBAAE;AACE,wBAAA,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC5B,wBAAA,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAC3C,wBAAA,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC;AACvC,wBAAA,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;AACtC,qBAAA;AACP,gBAAA,YAAY,EAAE,CAAC,CAAC,eAAe,CAAC;AACjC,aAAA,EAAC;SAAA,CAAC;AACH,QAAA,KAAK,EAAE;YACL,gBAAgB,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACxD,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAChD,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;AAC/C,SAAA;KACF,CAAC;AACJ,CAAC;AAED;;;;AAIG;AACI,eAAe,cAAc,CAClC,OAAe,EACf,MAAgB,EAChB,YAAoB,EACpB,OAAiC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEvD,IAAA,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACjF,IAAA,OAAO,0BAA0B,CAAC,MAAM,CAAC,CAAC;AAC5C,CAAC;AAEe,SAAA,uBAAuB,CACrC,OAAe,EACf,QAAuB,EACvB,YAAoB,EACpB,OAA8C,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEpE,IAAA,OAAO,OAAO,CAAC,IAAI,CAAC,8CAA8C,EAAE,YAAY,CAAC,CAAC,IAAI,iCACjFA,8CAAmC,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,IAAI,EAAE;AACJ,YAAA,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC;AACpC,YAAA,SAAS,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC7B,YAAA,aAAa,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,YAAY;AACpC,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,WAAW,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,WAAW;AACjC,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACpB,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,CAAC,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,CAAC;AACb,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,gBAAgB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,eAAe;AAC1C,YAAA,iBAAiB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,gBAAgB;AAC5C,YAAA,MAAM,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,MAAM;AACvB,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,KAAK;AACrB,YAAA,WAAW,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,WAAW;AAClC,SAAA,EAAA,CAAA,CACD,CAAC;AACL,CAAC;AAwGe,SAAA,0CAA0C,CACxD,OAAe,EACf,QAAuB,EACvB,YAAoB,EACpB,OAAwD,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAK9E,IAAA,OAAO,OAAO;AACX,SAAA,IAAI,CAAC,yDAAyD,EAAE,YAAY,CAAC;AAC7E,SAAA,IAAI,iCACAA,8CAAmC,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,IAAI,EAAE;AACJ,YAAA,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC;AACpC,YAAA,SAAS,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC7B,YAAA,aAAa,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,YAAY;AACpC,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,WAAW,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,WAAW;AACjC,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACpB,YAAA,UAAU,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,SAAS;AAC9B,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,CAAC,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,CAAC;AACb,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,gBAAgB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,eAAe;AAC1C,YAAA,iBAAiB,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,gBAAgB;AAC5C,YAAA,MAAM,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,MAAM;AACvB,YAAA,KAAK,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,KAAK;AACrB,YAAA,WAAW,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,WAAW;AAClC,SAAA,EAAA,CAAA,CACD,CAAC;AACP,CAAC;AA8He,SAAA,mCAAmC,CACjD,OAAe,EACf,MAAc,EACd,OAAA,GAAkC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAMxD,IAAA,OAAO,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjDA,8CAAmC,CAAC,OAAO,CAAC,CAAA,EAAA,EAC/C,IAAI,EAAE;AACJ,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,CAAC,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,CAAC;AACb,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACnB,YAAA,eAAe,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,cAAc;AACxC,YAAA,IAAI,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,IAAI;AACpB,SAAA,EAAA,CAAA,CACD,CAAC;AACL,CAAC;AAEe,SAAA,eAAe,CAC7B,OAAe,EACf,MAAgB,EAChB,cAAsB,EACtB,OAAiC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEvD,IAAA,MAAM,QAAQ,GAAG,mBAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC/D,OAAO,CACV,EAAA,EAAA,MAAM,EAAE,IAAI,IACZ,CAAC;AACH,IAAA,OAAO,UAAU,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;AACpD,CAAC;AAEM,eAAe,SAAS,CAC7B,OAAe,EACf,MAAc,EACd,OAAkC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;IAExD,MAAM,QAAQ,GAAG,MAAM,mCAAmC,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACrF,IAAA,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;;AAE1B,QAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAmC,CAAC;AAC1D,QAAA,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;AAC7B,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AACD,QAAA,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,KAAA;AAED,IAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,KAAK,EAAE;QAC7B,MAAM,MAAM,GAAG,MAAM,oBAAoB,CACvC,OAAO,EACP,QAAqD,CACtD,CAAC;AACF,QAAA,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,aAAa,EAAE,CAAC;AAC5C,QAAA,OAAO,0BAA0B,CAAC,MAAM,CAAC,CAAC;AAC3C,KAAA;AAAM,SAAA;AACL,QAAA,OAAO,0BAA0B,CAAC,QAAQ,CAAC,CAAC;AAC7C,KAAA;AACH,CAAC;AAEe,SAAA,mBAAmB,CACjC,OAAe,EACf,QAAuB,EACvB,cAAsB,EACtB,OAAqC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAE3D,IAAA,MAAM,QAAQ,GAAG,wBAAwB,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACtE,OAAO,CACV,EAAA,EAAA,MAAM,EAAE,IAAI,IACZ,CAAC;AACH,IAAA,OAAO,UAAU,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;AACxD,CAAC;AAED;;;;AAIG;AACI,eAAe,kBAAkB,CACtC,OAAe,EACf,QAAuB,EACvB,YAAoB,EACpB,OAAqC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAE3D,IAAA,MAAM,MAAM,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACxF,IAAA,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AACxB,QAAA,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AACzB,KAAA;AACD,IAAA,OAAO,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/C,CAAC;AAED,SAAS,kBAAkB,CAAC,EAAE,OAAO,EAAE,IAAI,EAA0B,EAAA;IACnE,IAAI,OAAQ,IAAI,CAAC,CAAC,CAAmB,CAAC,GAAG,KAAK,QAAQ,EAAE;QACtD,OAAO;AACL,YAAA,OAAO,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC;AAC1B,YAAA,IAAI,EAAE,IAAuB;SAC9B,CAAC;AACH,KAAA;AAAM,SAAA;QACL,OAAO;AACL,YAAA,OAAO,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;gBACtB,OAAO;oBACL,UAAU,EAAG,IAA2B,CAAC,QAAQ;iBAClD,CAAC;AACJ,aAAC,CAAC;SACH,CAAC;AACH,KAAA;AACH,CAAC;AAED,SAAS,0BAA0B,CACjC,QAGiD,EAAA;IAEjD,IAAI,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;AACnD,QAAA,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,KAAA;AAED,IAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACpC,IAAA,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,wBAAwB,CAC/B,OAAe,EACf,QAAuB,EACvB,cAAsB,EACtB,OAAqC,GAAA,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;;AAK3D,IAAA,OAAO,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,qBAAqB,0CAAE,UAAU;AAC9C,UAAE,0CAA0C,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvE,OAAO,CACV,EAAA,EAAA,WAAW,EAAE,CAAA,EAAA,GAAA,OAAO,CAAC,qBAAqB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,EACtD,CAAA,CAAA;UACF,uBAAuB,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AAC1E,CAAC;AAgCD;AACO,eAAe,mBAAmB,CACvC,OAAe,EACf,cAAsB,EACtB,WAAuB,EACvB,eAAqD,EACrD,YAAyC,EAAA;AAEzC,IAAA,MAAM,OAAO,GACX,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,IAAK,OAAO,eAAe,KAAK,QAAQ,GAAG,EAAE,GAAG,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAf,eAAe,GAAI,EAAE,CAAC,CAAC;AACrF,IAAA,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,GAAG,eAAe,GAAG,SAAS,CAAC;AAC1F,IAAA,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAA,GAAc,OAAO,EAAhB,IAAI,GAAKC,YAAA,CAAA,OAAO,EAAjD,CAAA,aAAA,EAAA,QAAA,EAAA,OAAA,CAAuC,CAAU,CAAC;AACxD,IAAA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;AACnC,SAAA,aAAa,CAAC,+CAA+C,EAAE,cAAc,CAAC;SAC9E,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EACH,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EACF,IAAI,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,EAAA,GAC/B,eAAe,IAAI,EAAE,eAAe,EAAE,EACvC,GAAC,WAAW,KAAK,SAAS,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,EAAC,GACjD,MAAM,IAAI,EAAE,MAAM,EAAE,EAAC,GACrB,KAAK,IAAI,EAAE,KAAK,EAAE,EAAC,EAAA,EAEtB,IAAI,CAAA,EAAA,EACP,WAAW,EAAE,qBAAqB,EAAA,CAAA,CAClC,CAAC;IACL,IAAI,MAAM,KAAK,KAAK,EAAE;QACpB,MAAM,IAAI,CAAC,KAAK,CAAC;AAClB,KAAA;IACD,OAAO,eAAe,KAAK,cAAc;AACvC,UAAE,IAAI;AACN,UAAG,qBAAqB,CAAC,IAAI,CAAyB,CAAC;AAC3D,CAAC;AAgCD;AACO,eAAe,qBAAqB,CACzC,OAAe,EACf,cAAsB,EACtB,WAAuB,EACvB,eAAuD,EACvD,YAA2C,EAAA;AAE3C,IAAA,MAAM,OAAO,GACX,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,IAAK,OAAO,eAAe,KAAK,QAAQ,GAAG,EAAE,GAAG,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAf,eAAe,GAAI,EAAE,CAAC,CAAC;AACrF,IAAA,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,GAAG,eAAe,GAAG,SAAS,CAAC;AAC1F,IAAA,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAc,GAAA,OAAO,EAAhB,IAAI,GAAAA,YAAA,CAAK,OAAO,EAA3D,CAAA,aAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,CAAiD,CAAU,CAAC;AAClE,IAAA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;AACnC,SAAA,aAAa,CAAC,iDAAiD,EAAE,cAAc,CAAC;AAChF,SAAA,IAAI,CACH,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,IAAI,EACF,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,IAAI,EAAE,MAAM,UAAU,CAAC,WAAW,CAAC,EAChC,GAAC,eAAe,IAAI,EAAE,eAAe,EAAE,EAAC,GACvC,QAAQ,IAAI,EAAE,QAAQ,EAAE,EAAC,GACzB,WAAW,KAAK,SAAS,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,EACjD,GAAC,MAAM,IAAI,EAAE,MAAM,EAAE,EAAC,GACrB,KAAK,IAAI,EAAE,KAAK,EAAE,EAErB,EAAA,EAAA,IAAI,CACP,EAAA,EAAA,WAAW,EAAE,qBAAqB,IAClC,CAAC;IACL,IAAI,MAAM,KAAK,KAAK,EAAE;QACpB,MAAM,IAAI,CAAC,KAAK,CAAC;AAClB,KAAA;IACD,OAAO,eAAe,KAAK,cAAc;AACvC,UAAE,IAAI;AACN,UAAG,qBAAqB,CAAC,IAAI,CAAyB,CAAC;AAC3D,CAAC;AAED,SAAS,gBAAgB,CAAC,QAAuB,EAAA;AAC/C,IAAA,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAc,KAAI;;AAAC,QAAA,QAAC;YACvC,IAAI,EAAE,CAAC,CAAC,IAAI;AACZ,YAAA,OAAO,EAAE,CAAA,EAAA,GAAA,CAAC,CAAC,OAAO,mCAAI,IAAI;YAC1B,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,aAAa,EAAE,CAAC,CAAC,YAAY;YAC7B,OAAO,EAAE,CAAC,CAAC,OAAO;AACnB,SAAA,EAAC;AAAA,KAAA,CAAC,CAAC;AACN;;AC9xBA;AACA;SAYgB,cAAc,GAAA;AAC5B,IAAA,MAAM,MAAM,GAAmB;AAC7B,QAAA,IAAI,EAAE,gBAAgB;AACtB,QAAA,WAAW,EAAE,CAAC,OAAO,EAAE,IAAI,KAAI;YAC7B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,QAAQ,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7B,gBAAA,KAAK,aAAa;oBAChB,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE;wBACtC,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,iBAAA,CAAmB,CAAC;AAC/C,qBAAA;AAAM,yBAAA;wBACL,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,YAAA,CAAc,CAAC;AAC1C,qBAAA;oBACD,MAAM;AACR,gBAAA,KAAK,YAAY;oBACf,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,WAAA,CAAa,CAAC;oBACxC,MAAM;AACR,gBAAA,KAAK,oBAAoB;oBACvB,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,mBAAA,CAAqB,CAAC;oBAChD,MAAM;AACR,gBAAA,KAAK,gBAAgB;oBACnB,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,qBAAA,CAAuB,CAAC;oBAClD,MAAM;AACR,gBAAA,KAAK,cAAc;oBACjB,GAAG,CAAC,QAAQ,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,CAAC,CAAA,mBAAA,CAAqB,CAAC;oBAChD,MAAM;AACT,aAAA;AACD,YAAA,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AACvC,YAAA,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC7B,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;KACF,CAAC;AACF,IAAA,OAAO,MAAM,CAAC;AAChB;;AC9CA;AACA;MAiDa,YAAY,CAAA;AAgCvB,IAAA,WAAA,CACE,mBAA2C,EAC3C,aAAA,GAAuE,EAAE,EACzE,UAA+B,EAAE,EAAA;;QAjC3B,IAAQ,CAAA,QAAA,GAAG,KAAK,CAAC;AAmCvB,QAAA,IAAI,IAAyB,CAAC;AAC9B,QAAA,IAAI,QAAgB,CAAC;AACrB,QAAA,IAAI,IAAqC,CAAC;AAC1C,QAAA,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;YACzB,QAAQ,GAAG,mBAA6B,CAAC;YACzC,IAAI,GAAG,aAAa,CAAC;YACrB,IAAI,GAAG,OAAO,CAAC;AACf,YAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACtB,SAAA;AAAM,aAAA;AACL,YAAA,QAAQ,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,GAAG,mBAAoC,CAAC;YAC5C,MAAM,EAAE,WAAW,EAAA,GAAkB,aAAa,EAA1B,QAAQ,GAAAA,YAAA,CAAK,aAAa,EAA5C,CAA4B,aAAA,CAAA,CAAgB,CAAC;YACnD,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,EACF,WAAW,EAAE;oBACX,gBAAgB,EAAE,CAAA,EAAA,GAAA,WAAW,KAAX,IAAA,IAAA,WAAW,uBAAX,WAAW,CAAE,gBAAgB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,eAAe;AAClE,oBAAA,MAAM,EAAE,WAAW,KAAA,IAAA,IAAX,WAAW,KAAX,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAW,CAAE,MAAM;iBAC5B,EACE,EAAA,QAAQ,CACZ,CAAC;AACH,SAAA;AAED,QAAA,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACrC,IAAI,CAAA,GACH,IAAI,CAAC,QAAQ;AACf,cAAE,EAAE;AACJ,cAAE;AACE,gBAAA,kBAAkB,EAAE;AAClB,oBAAA,IAAI,CAAA,EAAA,GAAA,IAAI,CAAC,kBAAkB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,CAAC;AAClC,oBAAA;AACE,wBAAA,QAAQ,EAAE,SAAS;wBACnB,MAAM,EAAE,cAAc,EAAE;AACzB,qBAAA;AACF,iBAAA;AACF,aAAA,GACL,CAAC;AACH,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAEC,mCAAkB,EAAE,CAAC,CAAC;QACjE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,4BAA4B,EAAE,CAAC,CAAC;KACjE;AAED;;;;;;AAMG;IACH,cAAc,CACZ,cAAsB,EACtB,MAAgB,EAChB,UAAiC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEvD,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACvC,QAAA,OAAO,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KACtE;AAED;;;;;;AAMG;AACH,IAAA,eAAe,CACb,cAAsB,EACtB,MAAgB,EAChB,UAAiC,EAAE,EAAA;AAEnC,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACvC,QAAA,OAAO,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KACvE;AAED;;;;;;AAMG;IACH,aAAa,CACX,cAAsB,EACtB,KAAe,EACf,UAAgC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAEtD,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACvC,QAAA,OAAO,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KACpE;AAED;;;;;;AAMG;IACH,kBAAkB,CAChB,cAAsB,EACtB,QAAuB,EACvB,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAE3D,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACvC,QAAA,OAAO,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KAC5E;AAED;;;;;;AAMG;IACH,mBAAmB,CACjB,cAAsB,EACtB,QAAuB,EACvB,UAAqC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;AAE3D,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACvC,QAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;KAC7E;AAED;;;;;AAKG;IACH,SAAS,CACP,MAAc,EACd,OAAA,GAAkC,EAAE,cAAc,EAAE,EAAE,EAAE,EAAA;QAExD,OAAO,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KACjD;;IA6BD,MAAM,qBAAqB,CACzB,cAAsB,EACtB,WAAuB,EACvB,eAAuD,EACvD,YAA2C,EAAA;AAE3C,QAAA,MAAM,OAAO,GACX,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,IAAK,OAAO,eAAe,KAAK,QAAQ,GAAG,EAAE,GAAG,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAf,eAAe,GAAI,EAAE,CAAC,CAAC;AACrF,QAAA,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,GAAG,eAAe,GAAG,SAAS,CAAC;AAC1F,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACvC,IAAI,eAAe,KAAK,SAAS,EAAE;AACjC,YAAA,OAAO,qBAAqB,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,CAE9E,CAAC;AACH,SAAA;AACD,QAAA,OAAO,qBAAqB,CAC1B,IAAI,CAAC,OAAO,EACZ,cAAc,EACd,WAAW,EACX,eAAe,EACf,OAAO,CACR,CAAC;KACH;;IA6BD,MAAM,mBAAmB,CACvB,cAAsB,EACtB,WAAuB,EACvB,eAAqD,EACrD,YAAyC,EAAA;AAEzC,QAAA,MAAM,OAAO,GACX,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,IAAK,OAAO,eAAe,KAAK,QAAQ,GAAG,EAAE,GAAG,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAf,eAAe,GAAI,EAAE,CAAC,CAAC;AACrF,QAAA,MAAM,eAAe,GAAG,OAAO,eAAe,KAAK,QAAQ,GAAG,eAAe,GAAG,SAAS,CAAC;AAC1F,QAAA,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACvC,IAAI,eAAe,KAAK,SAAS,EAAE;AACjC,YAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,CAE5E,CAAC;AACH,SAAA;AACD,QAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;KACjG;IAEO,QAAQ,CAAC,KAAa,EAAE,OAA2B,EAAA;AACzD,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClB,YAAA,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,SAAA;KACF;AACF,CAAA;AAED,SAAS,oBAAoB,CAAC,OAAe,EAAA;IAC3C,OAAO,CAAA,wBAAA,EAA2B,OAAO,CAAA,CAAE,CAAC;AAC9C,CAAC;AAED,SAAS,MAAM,CAAC,IAAyB,EAAA;IACvC,OAAOC,0BAAiB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC;AAC3D;;;;;;;;;"}