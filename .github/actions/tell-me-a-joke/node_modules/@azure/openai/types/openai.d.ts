/**
 * [Azure OpenAI](https://learn.microsoft.com/azure/cognitive-services/openai/overview)
 * provides REST API access to OpenAI's powerful language models including the GPT-3,
 * Codex and Embeddings model series. In addition, the new GPT-4 and ChatGPT (gpt-35-turbo)
 * model series have now reached general availability. These models can be easily adapted
 * to your specific task including but not limited to content generation, summarization,
 * semantic search, and natural language to code translation.
 *
 * @packageDocumentation
 */

import { AzureKeyCredential } from '@azure/core-auth';
import { ClientOptions } from '@azure-rest/core-client';
import { ErrorModel } from '@azure-rest/core-client';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure-rest/core-client';
import { TokenCredential } from '@azure/core-auth';

/** The type of the result of the transcription based on the requested response format */
export declare type AudioResult<ResponseFormat extends AudioResultFormat> = {
    json: AudioResultSimpleJson;
    verbose_json: AudioResultVerboseJson;
    vtt: string;
    srt: string;
    text: string;
}[ResponseFormat];

/** The result format of an audio task */
export declare type AudioResultFormat = 
/** This format will return an JSON structure containing a single \"text\" with the transcription. */
"json"
/** This format will return an JSON structure containing an enriched structure with the transcription. */
| "verbose_json"
/** This will make the response return the transcription as plain/text. */
| "text"
/** The transcription will be provided in SRT format (SubRip Text) in the form of plain/text. */
| "srt"
/** The transcription will be provided in VTT format (Web Video Text Tracks) in the form of plain/text. */
| "vtt";

/** The result of an audio task in a simple JSON format */
export declare interface AudioResultSimpleJson {
    /** Transcribed text. */
    text: string;
}

/** Transcription response. */
export declare interface AudioResultVerboseJson extends AudioResultSimpleJson {
    /** Audio transcription task. */
    task: AudioTranscriptionTask;
    /** Language detected in the source audio file. */
    language: string;
    /** Duration. */
    duration: number;
    /** Segments. */
    segments: AudioSegment[];
}

/** Transcription segment. */
export declare interface AudioSegment {
    /** Segment identifier. */
    id: number;
    /** Segment start offset. */
    start: number;
    /** Segment end offset. */
    end: number;
    /** Segment text. */
    text: string;
    /** Temperature. */
    temperature: number;
    /** Average log probability. */
    avgLogprob: number;
    /** Compression ratio. */
    compressionRatio: number;
    /** Probability of 'no speech'. */
    noSpeechProb: number;
    /** Tokens in this segment */
    tokens: number[];
    /** TODO */
    seek: number;
}

/** Audio transcription task type */
/** "transcribe", "translate" */
export declare type AudioTranscriptionTask = string;

/**
 *   A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
 *   completions request that should use Azure OpenAI chat extensions to augment the response behavior.
 *   The use of this configuration is compatible only with Azure OpenAI.
 */
export declare interface AzureChatExtensionConfiguration {
    /**
     *   The label for the type of an Azure chat extension. This typically corresponds to a matching Azure resource.
     *   Azure chat extensions are only compatible with Azure OpenAI.
     */
    type: AzureChatExtensionType;
    /**
     *   The configuration payload used for the Azure chat extension. The structure payload details are specific to the
     *   extension being configured.
     *   Azure chat extensions are only compatible with Azure OpenAI.
     */
    parameters: Record<string, any>;
}

/**
 *   A representation of the additional context information available when Azure OpenAI chat extensions are involved
 *   in the generation of a corresponding chat completions response. This context information is only populated when
 *   using an Azure OpenAI request configured to use a matching extension.
 */
export declare interface AzureChatExtensionsMessageContext {
    /**
     *   The contextual message payload associated with the Azure chat extensions used for a chat completions request.
     *   These messages describe the data source retrievals, plugin invocations, and other intermediate steps taken in the
     *   course of generating a chat completions response that was augmented by capabilities from Azure OpenAI chat
     *   extensions.
     */
    messages?: ChatMessage[];
}

/**
 *   A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat
 *   completions request that should use Azure OpenAI chat extensions to augment the response behavior.
 *   The use of this configuration is compatible only with Azure OpenAI.
 */
/** "AzureCognitiveSearch" */
export declare type AzureChatExtensionType = string;

/**
 * Options for Azure OpenAI chat extensions.
 */
export declare interface AzureExtensionsOptions {
    /**
     *   The configuration entries for Azure OpenAI chat extensions that use them.
     *   This additional specification is only compatible with Azure OpenAI.
     */
    extensions?: AzureChatExtensionConfiguration[];
}

export { AzureKeyCredential }

/** The state of a job or item. */
/** "notRunning", "running", "succeeded", "canceled", "failed" */
export declare type AzureOpenAIOperationState = string;

/** A polling status update or final response payload for an image operation. */
export declare interface BatchImageGenerationOperationResponse {
    /** The ID of the operation. */
    id: string;
    /** A timestamp when this job or item was created (in unix epochs). */
    created: Date;
    /** A timestamp when this operation and its associated images expire and will be deleted (in unix epochs). */
    expires?: number;
    /** The result of the operation if the operation succeeded. */
    result?: ImageGenerations;
    /** The status of the operation */
    status: AzureOpenAIOperationState;
    /** The error if the operation failed. */
    error?: ErrorModel;
}

/**
 * The representation of a single prompt completion as part of an overall chat completions request.
 * Generally, `n` choices are generated per provided prompt with a default value of 1.
 * Token limits and other settings may limit the number of choices generated.
 */
export declare interface ChatChoice {
    /** The chat message for a given chat completions prompt. */
    message?: ChatMessage;
    /** The ordered index associated with this chat completions choice. */
    index: number;
    /** The reason that this chat completions choice completed its generated. */
    finishReason: CompletionsFinishReason | null;
    /** The delta message content for a streaming response. */
    delta?: ChatMessage;
    /**
     * Information about the content filtering category (hate, sexual, violence, self_harm), if it
     * has been detected, as well as the severity level (very_low, low, medium, high-scale that
     * determines the intensity and risk level of harmful content) and if it has been filtered or not.
     */
    contentFilterResults?: ContentFilterResults;
}

/**
 * Representation of the response data from a chat completions request.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare interface ChatCompletions {
    /** A unique identifier associated with this chat completions response. */
    id: string;
    /**
     * The first timestamp associated with generation activity for this completions response,
     * represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
     */
    created: Date;
    /**
     * The collection of completions choices associated with this completions response.
     * Generally, `n` choices are generated per provided prompt with a default value of 1.
     * Token limits and other settings may limit the number of choices generated.
     */
    choices: ChatChoice[];
    /**
     * Content filtering results for zero or more prompts in the request. In a streaming request,
     * results for different prompts may arrive at different times or in different orders.
     */
    promptFilterResults?: PromptFilterResult[];
    /** Usage information for tokens processed and generated as part of this completions operation. */
    usage?: CompletionsUsage;
}

/** A single, role-attributed message within a chat completion interaction. */
export declare interface ChatMessage {
    /** The role associated with this message payload. */
    role: ChatRole;
    /** The text associated with this message payload. */
    content: string | null;
    /**
     * The name of the author of this message. `name` is required if role is `function`, and it should be the name of the
     * function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of
     * 64 characters.
     */
    name?: string;
    /** The name and arguments of a function that should be called, as generated by the model. */
    functionCall?: FunctionCall;
    /**
     *   Additional context data associated with a chat message when requesting chat completions using compatible Azure
     *   OpenAI chat extensions. This includes information like the intermediate data source retrievals used to service a
     *   request.
     *   This context information is only populated when using Azure OpenAI with chat extensions capabilities configured.
     */
    context?: AzureChatExtensionsMessageContext;
}

/** A description of the intended purpose of a message within a chat completions interaction. */
/** "system", "assistant", "user", "function", "tool" */
export declare type ChatRole = string;

/**
 * The representation of a single prompt completion as part of an overall completions request.
 * Generally, `n` choices are generated per provided prompt with a default value of 1.
 * Token limits and other settings may limit the number of choices generated.
 */
export declare interface Choice {
    /** The generated text for a given completions prompt. */
    text: string;
    /** The ordered index associated with this completions choice. */
    index: number;
    /**
     * Information about the content filtering category (hate, sexual, violence, self_harm), if it
     * has been detected, as well as the severity level (very_low, low, medium, high-scale that
     * determines the intensity and risk level of harmful content) and if it has been filtered or not.
     */
    contentFilterResults?: ContentFilterResults;
    /** The log probabilities model for tokens associated with this completions choice. */
    logprobs: CompletionsLogProbabilityModel | null;
    /** Reason for finishing */
    finishReason: CompletionsFinishReason | null;
}

/**
 * Representation of the response data from a completions request.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare interface Completions {
    /** A unique identifier associated with this completions response. */
    id: string;
    /**
     * The first timestamp associated with generation activity for this completions response,
     * represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
     */
    created: Date;
    /**
     * Content filtering results for zero or more prompts in the request. In a streaming request,
     * results for different prompts may arrive at different times or in different orders.
     */
    promptFilterResults?: PromptFilterResult[];
    /**
     * The collection of completions choices associated with this completions response.
     * Generally, `n` choices are generated per provided prompt with a default value of 1.
     * Token limits and other settings may limit the number of choices generated.
     */
    choices: Choice[];
    /** Usage information for tokens processed and generated as part of this completions operation. */
    usage: CompletionsUsage;
}

/** Representation of the manner in which a completions response concluded. */
/** "stop", "length", "content_filter", "function_call" */
export declare type CompletionsFinishReason = string;

/** Representation of a log probabilities model for a completions generation. */
export declare interface CompletionsLogProbabilityModel {
    /** The textual forms of tokens evaluated in this probability model. */
    tokens: string[];
    /** A collection of log probability values for the tokens in this completions data. */
    tokenLogprobs: (number | null)[];
    /** A mapping of tokens to maximum log probability values in this completions data. */
    topLogprobs: Record<string, number | null>[];
    /** The text offsets associated with tokens in this completions data. */
    textOffset: number[];
}

/** Representation of a log probabilities model for a completions generation. */
export declare interface CompletionsLogProbabilityModel {
    /** The textual forms of tokens evaluated in this probability model. */
    tokens: string[];
    /** A collection of log probability values for the tokens in this completions data. */
    tokenLogprobs: (number | null)[];
    /** A mapping of tokens to maximum log probability values in this completions data. */
    topLogprobs: Record<string, number | null>[];
    /** The text offsets associated with tokens in this completions data. */
    textOffset: number[];
}

/**
 * Representation of the token counts processed for a completions request.
 * Counts consider all tokens across prompts, choices, choice alternates, best_of generations, and
 * other consumers.
 */
export declare interface CompletionsUsage {
    /** The number of tokens generated across all completions emissions. */
    completionTokens: number;
    /** The number of tokens in the provided prompts for the completions request. */
    promptTokens: number;
    /** The total number of tokens processed for the completions request and response. */
    totalTokens: number;
}

/** Information about the content filtering error result. */
export declare interface ContentFilterErrorResults {
    /**
     * Describes an error returned if the content filtering system is
     * down or otherwise unable to complete the operation in time.
     */
    error: ErrorModel;
}

/** Information about filtered content severity level and if it has been filtered or not. */
export declare interface ContentFilterResult {
    /** Ratings for the intensity and risk level of filtered content. */
    severity: ContentFilterSeverity;
    /** A value indicating whether or not the content has been filtered. */
    filtered: boolean;
}

/** Information about the content filtering category, if it has been detected. */
export declare type ContentFilterResults = ContentFilterSuccessResults | ContentFilterErrorResults;

/** Ratings for the intensity and risk level of harmful content. */
/** "safe", "low", "medium", "high" */
export declare type ContentFilterSeverity = string;

/** Information about the content filtering success result. */
export declare interface ContentFilterSuccessResults {
    /**
     * Describes language related to anatomical organs and genitals, romantic relationships,
     *  acts portrayed in erotic or affectionate terms, physical sexual acts, including
     *  those portrayed as an assault or a forced sexual violent act against one’s will,
     *  prostitution, pornography, and abuse.
     */
    sexual?: ContentFilterResult;
    /**
     * Describes language related to physical actions intended to hurt, injure, damage, or
     * kill someone or something; describes weapons, etc.
     */
    violence?: ContentFilterResult;
    /**
     * Describes language attacks or uses that include pejorative or discriminatory language
     * with reference to a person or identity group on the basis of certain differentiating
     * attributes of these groups including but not limited to race, ethnicity, nationality,
     * gender identity and expression, sexual orientation, religion, immigration status, ability
     * status, personal appearance, and body size.
     */
    hate?: ContentFilterResult;
    /**
     * Describes language related to physical actions intended to purposely hurt, injure,
     * or damage one’s body, or kill oneself.
     */
    selfHarm?: ContentFilterResult;
    /**
     * Describes an error returned if the content filtering system is
     * down or otherwise unable to complete the operation in time.
     */
    error?: undefined;
}

/** Representation of a single embeddings relatedness comparison. */
export declare interface EmbeddingItem {
    /**
     * List of embeddings value for the input prompt. These represent a measurement of the
     * vector-based relatedness of the provided input.
     */
    embedding: number[];
    /** Index of the prompt to which the EmbeddingItem corresponds. */
    index: number;
}

/**
 * Representation of the response data from an embeddings request.
 * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,
 * recommendations, and other similar scenarios.
 */
export declare interface Embeddings {
    /** Embedding values for the prompts submitted in the request. */
    data: EmbeddingItem[];
    /** Usage counts for tokens input using the embeddings API. */
    usage: EmbeddingsUsage;
}

/** Measurement of the amount of tokens used in this request and response. */
export declare interface EmbeddingsUsage {
    /** Number of tokens sent in the original request. */
    promptTokens: number;
    /** Total number of tokens transacted in this request/response. */
    totalTokens: number;
}

/** The name and arguments of a function that should be called, as generated by the model. */
export declare interface FunctionCall {
    /** The name of the function to call. */
    name: string;
    /**
     * The arguments to call the function with, as generated by the model in JSON format.
     * Note that the model does not always generate valid JSON, and may hallucinate parameters
     * not defined by your function schema. Validate the arguments in your code before calling
     * your function.
     */
    arguments: string;
}

/**
 * The collection of predefined behaviors for handling request-provided function information in a chat completions
 * operation.
 */
/** "auto", "none" */
export declare type FunctionCallPreset = string;

/** The definition of a caller-specified function that chat completions may invoke in response to matching user input. */
export declare interface FunctionDefinition {
    /** The name of the function to be called. */
    name: string;
    /**
     * A description of what the function does. The model will use this description when selecting the function and
     * interpreting its parameters.
     */
    description?: string;
    /** The parameters the functions accepts, described as a JSON Schema object. */
    parameters?: Record<string, any>;
}

/**
 * A structure that specifies the exact name of a specific, request-provided function to use when processing a chat
 * completions operation.
 */
export declare interface FunctionName {
    /** The name of the function to call. */
    name: string;
}

/** The options for an audio transcription request */
export declare interface GetAudioTranscriptionOptions extends OperationOptions {
    /** An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language. */
    prompt?: string;
    /**
     * The sampling temperature, between 0 and 1.
     * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
     */
    temperature?: number;
    /** The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency. */
    language?: string;
    /** (non-Azure) ID of the model to use. Only whisper-1 is currently available. */
    model?: string;
}

/** The options for an audio translation request */
export declare interface GetAudioTranslationOptions extends OperationOptions {
    /** An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language. */
    prompt?: string;
    /**
     * The sampling temperature, between 0 and 1.
     * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
     */
    temperature?: number;
    /** (non-Azure) ID of the model to use. Only whisper-1 is currently available. */
    model?: string;
}

/**
 * This module contains models that we want to live side-by-side with the
 * corresponding generated models. This is useful for providing customer-facing
 * models that has different names/types than the generated models.
 */
export declare interface GetChatCompletionsOptions extends OperationOptions {
    /** A list of functions the model may generate JSON inputs for. */
    functions?: FunctionDefinition[];
    /**
     * Controls how the model responds to function calls. "none" means the model does not call a function,
     * and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.
     *  Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     *  "none" is the default when no functions are present. "auto" is the default if functions are present.
     */
    functionCall?: FunctionCallPreset | FunctionName;
    /** The maximum number of tokens to generate. */
    maxTokens?: number;
    /**
     * The sampling temperature to use that controls the apparent creativity of generated completions.
     * Higher values will make output more random while lower values will make results more focused
     * and deterministic.
     * It is not recommended to modify temperature and top_p for the same completions request as the
     * interaction of these two settings is difficult to predict.
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature called nucleus sampling. This value causes the
     * model to consider the results of tokens with the provided probability mass. As an example, a
     * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     * considered.
     * It is not recommended to modify temperature and top_p for the same completions request as the
     * interaction of these two settings is difficult to predict.
     */
    topP?: number;
    /**
     * A map between GPT token IDs and bias scores that influences the probability of specific tokens
     * appearing in a completions response. Token IDs are computed via external tokenizer tools, while
     * bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to
     * a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     * score varies by model.
     */
    logitBias?: Record<string, number>;
    /**
     * An identifier for the caller or end user of the operation. This may be used for tracking
     * or rate-limiting purposes.
     */
    user?: string;
    /**
     * The number of chat completions choices that should be generated for a chat completions
     * response.
     * Because this setting can generate many completions, it may quickly consume your token quota.
     * Use carefully and ensure reasonable settings for max_tokens and stop.
     */
    n?: number;
    /** A collection of textual sequences that will end completions generation. */
    stop?: string[];
    /**
     * A value that influences the probability of generated tokens appearing based on their existing
     * presence in generated text.
     * Positive values will make tokens less likely to appear when they already exist and increase the
     * model's likelihood to output new topics.
     */
    presencePenalty?: number;
    /**
     * A value that influences the probability of generated tokens appearing based on their cumulative
     * frequency in generated text.
     * Positive values will make tokens less likely to appear as their frequency increases and
     * decrease the likelihood of the model repeating the same statements verbatim.
     */
    frequencyPenalty?: number;
    /** A value indicating whether chat completions should be streamed for this request. */
    stream?: boolean;
    /**
     * The model name to provide as part of this completions request.
     * Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     * resource URI that's connected to.
     */
    model?: string;
    /**
     *   The configuration entries for Azure OpenAI chat extensions that use them.
     *   This additional specification is only compatible with Azure OpenAI.
     */
    azureExtensionOptions?: AzureExtensionsOptions;
}

export declare interface GetCompletionsOptions extends OperationOptions {
    /** The maximum number of tokens to generate. */
    maxTokens?: number;
    /**
     * The sampling temperature to use that controls the apparent creativity of generated completions.
     * Higher values will make output more random while lower values will make results more focused
     * and deterministic.
     * It is not recommended to modify temperature and top_p for the same completions request as the
     * interaction of these two settings is difficult to predict.
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature called nucleus sampling. This value causes the
     * model to consider the results of tokens with the provided probability mass. As an example, a
     * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     * considered.
     * It is not recommended to modify temperature and top_p for the same completions request as the
     * interaction of these two settings is difficult to predict.
     */
    topP?: number;
    /**
     * A map between GPT token IDs and bias scores that influences the probability of specific tokens
     * appearing in a completions response. Token IDs are computed via external tokenizer tools, while
     * bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to
     * a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     * score varies by model.
     */
    logitBias?: Record<string, number>;
    /**
     * An identifier for the caller or end user of the operation. This may be used for tracking
     * or rate-limiting purposes.
     */
    user?: string;
    /**
     * The number of completions choices that should be generated per provided prompt as part of an
     * overall completions response.
     * Because this setting can generate many completions, it may quickly consume your token quota.
     * Use carefully and ensure reasonable settings for max_tokens and stop.
     */
    n?: number;
    /**
     * A value that controls the emission of log probabilities for the provided number of most likely
     * tokens within a completions response.
     */
    logprobs?: number;
    /**
     * A value specifying whether completions responses should include input prompts as prefixes to
     * their generated output.
     */
    echo?: boolean;
    /** A collection of textual sequences that will end completions generation. */
    stop?: string[];
    /**
     * A value that influences the probability of generated tokens appearing based on their existing
     * presence in generated text.
     * Positive values will make tokens less likely to appear when they already exist and increase the
     * model's likelihood to output new topics.
     */
    presencePenalty?: number;
    /**
     * A value that influences the probability of generated tokens appearing based on their cumulative
     * frequency in generated text.
     * Positive values will make tokens less likely to appear as their frequency increases and
     * decrease the likelihood of the model repeating the same statements verbatim.
     */
    frequencyPenalty?: number;
    /**
     * A value that controls how many completions will be internally generated prior to response
     * formulation.
     * When used together with n, best_of controls the number of candidate completions and must be
     * greater than n.
     * Because this setting can generate many completions, it may quickly consume your token quota.
     * Use carefully and ensure reasonable settings for max_tokens and stop.
     */
    bestOf?: number;
    /** A value indicating whether chat completions should be streamed for this request. */
    stream?: boolean;
    /**
     * The model name to provide as part of this completions request.
     * Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     * resource URI that's connected to.
     */
    model?: string;
}

export declare interface GetEmbeddingsOptions extends OperationOptions {
    /**
     * An identifier for the caller or end user of the operation. This may be used for tracking
     * or rate-limiting purposes.
     */
    user?: string;
    /**
     * The model name to provide as part of this embeddings request.
     * Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     * resource URI that's connected to.
     */
    model?: string;
}

/**
 * Options to custom the images generation request
 */
export declare interface ImageGenerationOptions extends OperationOptions {
    /** The number of images to generate (defaults to 1). */
    n?: number;
    /** The desired size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 (defaults to 1024x1024). */
    size?: ImageSize;
    /**
     *   The format in which image generation response items should be presented.
     *   Azure OpenAI only supports URL response items.
     */
    responseFormat?: ImageGenerationResponseFormat;
    /** A unique identifier representing your end-user, which can help to monitor and detect abuse. */
    user?: string;
}

/** The format in which the generated images are returned. */
/** "url", "b64_json" */
export declare type ImageGenerationResponseFormat = string;

/** The result of the operation if the operation succeeded. */
export declare interface ImageGenerations {
    /** A timestamp when this job or item was created (in unix epochs). */
    created: Date;
    /** The images generated by the operator. */
    data: ImageLocation[] | ImagePayload[];
}

/** An image response item that provides a URL from which an image may be accessed. */
export declare interface ImageLocation {
    /** The URL that provides temporary access to download the generated image. */
    url: string;
}

/** An image response item that directly represents the image data as a base64-encoded string. */
export declare interface ImagePayload {
    /** The complete data for an image represented as a base64-encoded string. */
    base64Data: string;
}

/** The desired size of the generated images. Must be one of 256x256, 512x512, or 1024x1024. */
/** "256x256", "512x512", "1024x1024" */
export declare type ImageSize = string;

export declare class OpenAIClient {
    private _client;
    private _isAzure;
    /**
     * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.
     * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.
     *                 For example: https://my-resource.openai.azure.com.
     * @param credential - A key credential used to authenticate to an Azure OpenAI resource.
     * @param options - The options for configuring the client.
     * @remarks
     *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.
     *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.
     */
    constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);
    /**
     * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.
     * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.
     *                 For example: https://my-resource.openai.azure.com.
     * @param credential - A token credential used to authenticate with an Azure OpenAI resource.
     * @param options - The options for configuring the client.
     */
    constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);
    /**
     * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.
     * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.
     * @param options - The options for configuring the client.
     * @remarks
     *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.
     *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.
     */
    constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);
    /**
     * Returns textual completions as configured for a given prompt.
     * @param deploymentName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param prompt - The prompt to use for this request.
     * @param options - The options for this completions request.
     * @returns The completions for the given prompt.
     */
    getCompletions(deploymentName: string, prompt: string[], options?: GetCompletionsOptions): Promise<Completions>;
    /**
     * Lists the completions tokens as they become available for a given prompt.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param prompt - The prompt to use for this request.
     * @param options - The completions options for this completions request.
     * @returns An asynchronous iterable of completions tokens.
     */
    listCompletions(deploymentName: string, prompt: string[], options?: GetCompletionsOptions): AsyncIterable<Omit<Completions, "usage">>;
    /**
     * Return the computed embeddings for a given prompt.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param input - The prompt to use for this request.
     * @param options - The embeddings options for this embeddings request.
     * @returns The embeddings for the given prompt.
     */
    getEmbeddings(deploymentName: string, input: string[], options?: GetEmbeddingsOptions): Promise<Embeddings>;
    /**
     * Get chat completions for provided chat context messages.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param messages - The chat context messages to use for this request.
     * @param options - The chat completions options for this completions request.
     * @returns The chat completions for the given chat context messages.
     */
    getChatCompletions(deploymentName: string, messages: ChatMessage[], options?: GetChatCompletionsOptions): Promise<ChatCompletions>;
    /**
     * Lists the chat completions tokens as they become available for a chat context.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param messages - The chat context messages to use for this request.
     * @param options - The chat completions options for this chat completions request.
     * @returns An asynchronous iterable of chat completions tokens.
     */
    listChatCompletions(deploymentName: string, messages: ChatMessage[], options?: GetChatCompletionsOptions): AsyncIterable<ChatCompletions>;
    /**
     * Starts the generation of a batch of images from a text caption
     * @param prompt - The prompt to use for this request.
     * @param options - The options for this image request.
     * @returns The image generation response (containing url or base64 data).
     */
    getImages(prompt: string, options?: ImageGenerationOptions): Promise<ImageGenerations>;
    /**
     * Returns the transcription of an audio file in a simple JSON format.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param fileContent - The content of the audio file to transcribe.
     * @param options - The options for this audio transcription request.
     * @returns The audio transcription result in a simple JSON format.
     */
    getAudioTranscription(deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranscriptionOptions): Promise<AudioResultSimpleJson>;
    /**
     * Returns the transcription of an audio file.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param fileContent - The content of the audio file to transcribe.
     * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
     * @param options - The options for this audio transcription request.
     * @returns The audio transcription result in a format of your choice.
     */
    getAudioTranscription<Format extends AudioResultFormat>(deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranscriptionOptions): Promise<AudioResult<Format>>;
    /**
     * Returns the translation of an audio file.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param fileContent - The content of the audio file to translate.
     * @param options - The options for this audio translation request.
     * @returns The audio translation result.
     */
    getAudioTranslation(deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranslationOptions): Promise<AudioResultSimpleJson>;
    /**
     * Returns the translation of an audio file.
     * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
     * @param fileContent - The content of the audio file to translate.
     * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
     * @param options - The options for this audio translation request.
     * @returns The audio translation result.
     */
    getAudioTranslation<Format extends AudioResultFormat>(deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranslationOptions): Promise<AudioResult<Format>>;
    private setModel;
}

export declare interface OpenAIClientOptions extends ClientOptions {
}

/**
 * The OpenAIKeyCredential class represents an OpenAI API key
 * and is used to authenticate into an OpenAI client for
 * an OpenAI endpoint.
 */
export declare class OpenAIKeyCredential implements KeyCredential {
    private _key;
    /**
     * Create an instance of an AzureKeyCredential for use
     * with a service client.
     *
     * @param key - The initial value of the key to use in authentication
     */
    constructor(key: string);
    /**
     * The value of the key to be used in authentication
     */
    get key(): string;
    /**
     * Change the value of the key.
     *
     * Updates will take effect upon the next request after
     * updating the key value.
     *
     * @param newKey - The new key value to be used
     */
    update(newKey: string): void;
}

/** Content filtering results for a single prompt in the request. */
export declare interface PromptFilterResult {
    /** The index of this prompt in the set of prompt results */
    promptIndex: number;
    /** Content filtering results for this prompt */
    contentFilterResults?: ContentFilterResults;
}

export { }
